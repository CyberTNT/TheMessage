// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: role.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from role.proto</summary>
public static partial class RoleReflection {

  #region Descriptor
  /// <summary>File descriptor for role.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RoleReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgpyb2xlLnByb3RvGgxjb21tb24ucHJvdG8iNgoWc2tpbGxfcWlfaHVvX2tl",
          "X2p1X3RvcxIPCgdjYXJkX2lkGAEgASgNEgsKA3NlcRgCIAEoDSI8ChZza2ls",
          "bF9xaV9odW9fa2VfanVfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIPCgdjYXJk",
          "X2lkGAIgASgNIngKEXNraWxsX2d1aV96aGFfdG9zEhgKEHRhcmdldF9wbGF5",
          "ZXJfaWQYASABKA0SHQoJY2FyZF90eXBlGAIgASgOMgouY2FyZF90eXBlEh0K",
          "CXdhbnRfdHlwZRgDIAEoDjIKLmNhcmRfdHlwZRILCgNzZXEYBCABKA0iXwoR",
          "c2tpbGxfZ3VpX3poYV90b2MSEQoJcGxheWVyX2lkGAEgASgNEhgKEHRhcmdl",
          "dF9wbGF5ZXJfaWQYAiABKA0SHQoJY2FyZF90eXBlGAMgASgOMgouY2FyZF90",
          "eXBlIlEKF3NraWxsX3lpX3lhX2h1YW5feWFfdG9zEhgKEHRhcmdldF9wbGF5",
          "ZXJfaWQYASABKA0SDwoHY2FyZF9pZBgCIAEoDRILCgNzZXEYAyABKA0iWwoX",
          "c2tpbGxfeWlfeWFfaHVhbl95YV90b2MSEQoJcGxheWVyX2lkGAEgASgNEhgK",
          "EHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SEwoEY2FyZBgDIAEoCzIFLmNhcmQi",
          "ZQoXc2tpbGxfeWlfaHVhX2ppZV9tdV90b3MSFgoOZnJvbV9wbGF5ZXJfaWQY",
          "ASABKA0SDwoHY2FyZF9pZBgCIAEoDRIUCgx0b19wbGF5ZXJfaWQYAyABKA0S",
          "CwoDc2VxGAQgASgNIoMBChdza2lsbF95aV9odWFfamllX211X3RvYxIRCglw",
          "bGF5ZXJfaWQYASABKA0SFgoOZnJvbV9wbGF5ZXJfaWQYAiABKA0SDwoHY2Fy",
          "ZF9pZBgDIAEoDRIUCgx0b19wbGF5ZXJfaWQYBCABKA0SFgoOam9pbl9pbnRv",
          "X2hhbmQYBSABKAgiIQoSc2tpbGxfdG91X3RpYW5fdG9zEgsKA3NlcRgBIAEo",
          "DSInChJza2lsbF90b3VfdGlhbl90b2MSEQoJcGxheWVyX2lkGAEgASgNIiYK",
          "EXNraWxsX2h1YW5fcmlfdG9jEhEKCXBsYXllcl9pZBgBIAEoDSJiChFza2ls",
          "bF9qaV9zb25nX3RvcxIQCghjYXJkX2lkcxgBIAMoDRIUCgxtZXNzYWdlX2Nh",
          "cmQYAiABKA0SGAoQdGFyZ2V0X3BsYXllcl9pZBgDIAEoDRILCgNzZXEYBCAB",
          "KA0iXQoRc2tpbGxfamlfc29uZ190b2MSEQoJcGxheWVyX2lkGAEgASgNEhsK",
          "DG1lc3NhZ2VfY2FyZBgCIAEoCzIFLmNhcmQSGAoQdGFyZ2V0X3BsYXllcl9p",
          "ZBgDIAEoDSI7Chtza2lsbF9taWFuX2xpX2Nhbmdfemhlbl90b3MSDwoHY2Fy",
          "ZF9pZBgBIAEoDRILCgNzZXEYAiABKA0iXwobc2tpbGxfbWlhbl9saV9jYW5n",
          "X3poZW5fdG9jEhEKCXBsYXllcl9pZBgBIAEoDRITCgRjYXJkGAIgASgLMgUu",
          "Y2FyZBIYChB0YXJnZXRfcGxheWVyX2lkGAMgASgNIjIKEnNraWxsX2ppbl9z",
          "aGVuX3RvcxIPCgdjYXJkX2lkGAEgASgNEgsKA3NlcRgCIAEoDSI8ChJza2ls",
          "bF9qaW5fc2hlbl90b2MSEQoJcGxheWVyX2lkGAEgASgNEhMKBGNhcmQYAiAB",
          "KAsyBS5jYXJkIkwKEnNraWxsX2xpYW5fbWluX3RvcxIYChB0YXJnZXRfcGxh",
          "eWVyX2lkGAEgASgNEg8KB2NhcmRfaWQYAiABKA0SCwoDc2VxGAMgASgNIlIK",
          "EnNraWxsX2xpYW5fbWluX3RvYxIRCglwbGF5ZXJfaWQYASABKA0SGAoQdGFy",
          "Z2V0X3BsYXllcl9pZBgCIAEoDRIPCgdjYXJkX2lkGAMgASgNIiUKEHNraWxs",
          "X2Z1X2hlaV90b2MSEQoJcGxheWVyX2lkGAEgASgNIjUKFXNraWxsX3hpbl9z",
          "aV9jaGFvX3RvcxIPCgdjYXJkX2lkGAEgASgNEgsKA3NlcRgCIAEoDSIqChVz",
          "a2lsbF94aW5fc2lfY2hhb190b2MSEQoJcGxheWVyX2lkGAEgASgNIiUKEHNr",
          "aWxsX3NoaV9zaV90b2MSEQoJcGxheWVyX2lkGAEgASgNIlMKGXNraWxsX3dh",
          "aXRfZm9yX3J1X2d1aV90b2MSEQoJcGxheWVyX2lkGAEgASgNEhYKDndhaXRp",
          "bmdfc2Vjb25kGAIgASgNEgsKA3NlcRgDIAEoDSJAChBza2lsbF9ydV9ndWlf",
          "dG9zEg4KBmVuYWJsZRgBIAEoCBIPCgdjYXJkX2lkGAIgASgNEgsKA3NlcRgD",
          "IAEoDSJGChBza2lsbF9ydV9ndWlfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIP",
          "CgdjYXJkX2lkGAIgASgNEg4KBmVuYWJsZRgDIAEoCCJXCh1za2lsbF93YWl0",
          "X2Zvcl96aHVhbl9qaWFvX3RvYxIRCglwbGF5ZXJfaWQYASABKA0SFgoOd2Fp",
          "dGluZ19zZWNvbmQYAiABKA0SCwoDc2VxGAMgASgNIl4KFHNraWxsX3podWFu",
          "X2ppYW9fdG9zEg4KBmVuYWJsZRgBIAEoCBIPCgdjYXJkX2lkGAIgASgNEhgK",
          "EHRhcmdldF9wbGF5ZXJfaWQYAyABKA0SCwoDc2VxGAQgASgNIlQKFHNraWxs",
          "X3podWFuX2ppYW9fdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIPCgdjYXJkX2lk",
          "GAIgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQYAyABKA0iJgoRc2tpbGxfbWlu",
          "Z19lcl90b2MSEQoJcGxheWVyX2lkGAEgASgNIh8KEHNraWxsX2ppX3poaV90",
          "b3MSCwoDc2VxGAEgASgNIiUKEHNraWxsX2ppX3poaV90b2MSEQoJcGxheWVy",
          "X2lkGAEgASgNIsABChxza2lsbF93YWl0X2Zvcl9jaGVuZ196aGlfdG9jEhEK",
          "CXBsYXllcl9pZBgBIAEoDRIVCg1kaWVfcGxheWVyX2lkGAIgASgNEhQKBWNh",
          "cmRzGAMgAygLMgUuY2FyZBIYCghpZGVudGl0eRgEIAEoDjIGLmNvbG9yEiEK",
          "C3NlY3JldF90YXNrGAUgASgOMgwuc2VjcmV0X3Rhc2sSFgoOd2FpdGluZ19z",
          "ZWNvbmQYBiABKA0SCwoDc2VxGAcgASgNIjIKE3NraWxsX2NoZW5nX3poaV90",
          "b3MSDgoGZW5hYmxlGAEgASgIEgsKA3NlcRgCIAEoDSJPChNza2lsbF9jaGVu",
          "Z196aGlfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIVCg1kaWVfcGxheWVyX2lk",
          "GAIgASgNEg4KBmVuYWJsZRgDIAEoCCInChJza2lsbF9qaXVfamlfYV90b2MS",
          "EQoJcGxheWVyX2lkGAEgASgNInAKEnNraWxsX2NoZW5nX2Z1X3RvYxIRCglw",
          "bGF5ZXJfaWQYASABKA0SFgoOZnJvbV9wbGF5ZXJfaWQYAiABKA0SEwoEY2Fy",
          "ZBgDIAEoCzIFLmNhcmQSGgoSdW5rbm93bl9jYXJkX2NvdW50GAQgASgNIlgK",
          "EnNraWxsX2ppdV9qaV9iX3RvYxIRCglwbGF5ZXJfaWQYASABKA0SEwoEY2Fy",
          "ZBgCIAEoCzIFLmNhcmQSGgoSdW5rbm93bl9jYXJkX2NvdW50GAMgASgNIlMK",
          "GXNraWxsX3dhaXRfZm9yX3lpX3hpbl90b2MSEQoJcGxheWVyX2lkGAEgASgN",
          "EhYKDndhaXRpbmdfc2Vjb25kGAIgASgNEgsKA3NlcRgDIAEoDSJaChBza2ls",
          "bF95aV94aW5fdG9zEg4KBmVuYWJsZRgBIAEoCBIYChB0YXJnZXRfcGxheWVy",
          "X2lkGAIgASgNEg8KB2NhcmRfaWQYAyABKA0SCwoDc2VxGAQgASgNImQKEHNr",
          "aWxsX3lpX3hpbl90b2MSEQoJcGxheWVyX2lkGAEgASgNEhgKEHRhcmdldF9w",
          "bGF5ZXJfaWQYAiABKA0SEwoEY2FyZBgDIAEoCzIFLmNhcmQSDgoGZW5hYmxl",
          "GAQgASgIIiYKEXNraWxsX3poaV95aW5fdG9jEhEKCXBsYXllcl9pZBgBIAEo",
          "DSI+ChVza2lsbF9qaW5nX21lbmdfYV90b3MSGAoQdGFyZ2V0X3BsYXllcl9p",
          "ZBgBIAEoDRILCgNzZXEYAiABKA0ifwoVc2tpbGxfamluZ19tZW5nX2FfdG9j",
          "EhEKCXBsYXllcl9pZBgBIAEoDRIYChB0YXJnZXRfcGxheWVyX2lkGAIgASgN",
          "EhQKBWNhcmRzGAMgAygLMgUuY2FyZBIWCg53YWl0aW5nX3NlY29uZBgEIAEo",
          "DRILCgNzZXEYBSABKA0iNQoVc2tpbGxfamluZ19tZW5nX2JfdG9zEg8KB2Nh",
          "cmRfaWQYASABKA0SCwoDc2VxGAIgASgNIlkKFXNraWxsX2ppbmdfbWVuZ19i",
          "X3RvYxIRCglwbGF5ZXJfaWQYASABKA0SGAoQdGFyZ2V0X3BsYXllcl9pZBgC",
          "IAEoDRITCgRjYXJkGAMgASgLMgUuY2FyZCJEChtza2lsbF9qaWVfZGFvX3No",
          "YV9yZW5fYV90b3MSGAoQdGFyZ2V0X3BsYXllcl9pZBgBIAEoDRILCgNzZXEY",
          "AiABKA0ihAEKG3NraWxsX2ppZV9kYW9fc2hhX3Jlbl9hX3RvYxIRCglwbGF5",
          "ZXJfaWQYASABKA0SGAoQdGFyZ2V0X3BsYXllcl9pZBgCIAEoDRITCgRjYXJk",
          "GAMgASgLMgUuY2FyZBIWCg53YWl0aW5nX3NlY29uZBgEIAEoDRILCgNzZXEY",
          "BSABKA0iVAobc2tpbGxfamllX2Rhb19zaGFfcmVuX2JfdG9zEg4KBmVuYWJs",
          "ZRgBIAEoCBIYChB0YXJnZXRfcGxheWVyX2lkGAIgASgNEgsKA3NlcRgDIAEo",
          "DSJfChtza2lsbF9qaWVfZGFvX3NoYV9yZW5fYl90b2MSEQoJcGxheWVyX2lk",
          "GAEgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SEwoEY2FyZBgDIAEo",
          "CzIFLmNhcmQiPAoTc2tpbGxfamlhb19qaV9hX3RvcxIYChB0YXJnZXRfcGxh",
          "eWVyX2lkGAEgASgNEgsKA3NlcRgCIAEoDSKZAQoTc2tpbGxfamlhb19qaV9h",
          "X3RvYxIRCglwbGF5ZXJfaWQYASABKA0SGAoQdGFyZ2V0X3BsYXllcl9pZBgC",
          "IAEoDRIUCgVjYXJkcxgDIAMoCzIFLmNhcmQSGgoSdW5rbm93bl9jYXJkX2Nv",
          "dW50GAQgASgNEhYKDndhaXRpbmdfc2Vjb25kGAUgASgNEgsKA3NlcRgGIAEo",
          "DSI0ChNza2lsbF9qaWFvX2ppX2JfdG9zEhAKCGNhcmRfaWRzGAEgAygNEgsK",
          "A3NlcRgCIAEoDSJ0ChNza2lsbF9qaWFvX2ppX2JfdG9jEhEKCXBsYXllcl9p",
          "ZBgBIAEoDRIYChB0YXJnZXRfcGxheWVyX2lkGAIgASgNEhQKBWNhcmRzGAMg",
          "AygLMgUuY2FyZBIaChJ1bmtub3duX2NhcmRfY291bnQYBCABKA0iVwodc2tp",
          "bGxfbWlhb19iaV9xaWFvX2JpYW5fYV90b3MSGAoQdGFyZ2V0X3BsYXllcl9p",
          "ZBgBIAEoDRIPCgdjYXJkX2lkGAIgASgNEgsKA3NlcRgDIAEoDSKCAQodc2tp",
          "bGxfbWlhb19iaV9xaWFvX2JpYW5fYV90b2MSEQoJcGxheWVyX2lkGAEgASgN",
          "EhgKEHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SDwoHY2FyZF9pZBgDIAEoDRIW",
          "Cg53YWl0aW5nX3NlY29uZBgEIAEoDRILCgNzZXEYBSABKA0iZwodc2tpbGxf",
          "bWlhb19iaV9xaWFvX2JpYW5fYl90b3MSDgoGZW5hYmxlGAEgASgIEhgKEHRh",
          "cmdldF9wbGF5ZXJfaWQYAiABKA0SDwoHY2FyZF9pZBgDIAEoDRILCgNzZXEY",
          "BCABKA0iXQodc2tpbGxfbWlhb19iaV9xaWFvX2JpYW5fYl90b2MSEQoJcGxh",
          "eWVyX2lkGAEgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SDwoHY2Fy",
          "ZF9pZBgDIAEoDSI7ChJza2lsbF9qaW5fYmlfYV90b3MSGAoQdGFyZ2V0X3Bs",
          "YXllcl9pZBgBIAEoDRILCgNzZXEYAiABKA0iZgoSc2tpbGxfamluX2JpX2Ff",
          "dG9jEhEKCXBsYXllcl9pZBgBIAEoDRIYChB0YXJnZXRfcGxheWVyX2lkGAIg",
          "ASgNEhYKDndhaXRpbmdfc2Vjb25kGAMgASgNEgsKA3NlcRgEIAEoDSIzChJz",
          "a2lsbF9qaW5fYmlfYl90b3MSEAoIY2FyZF9pZHMYASADKA0SCwoDc2VxGAIg",
          "ASgNInMKEnNraWxsX2ppbl9iaV9iX3RvYxIRCglwbGF5ZXJfaWQYASABKA0S",
          "GAoQdGFyZ2V0X3BsYXllcl9pZBgCIAEoDRIUCgVjYXJkcxgDIAMoCzIFLmNh",
          "cmQSGgoSdW5rbm93bl9jYXJkX2NvdW50GAQgASgNIj4KFXNraWxsX21pYW9f",
          "c2hvdV9hX3RvcxIYChB0YXJnZXRfcGxheWVyX2lkGAEgASgNEgsKA3NlcRgC",
          "IAEoDSKcAQoVc2tpbGxfbWlhb19zaG91X2FfdG9jEhEKCXBsYXllcl9pZBgB",
          "IAEoDRIYChB0YXJnZXRfcGxheWVyX2lkGAIgASgNEhQKBWNhcmRzGAMgAygL",
          "MgUuY2FyZBIWCg53YWl0aW5nX3NlY29uZBgEIAEoDRILCgNzZXEYBSABKA0S",
          "GwoMbWVzc2FnZV9jYXJkGAYgASgLMgUuY2FyZCJoChVza2lsbF9taWFvX3No",
          "b3VfYl90b3MSDwoHY2FyZF9pZBgBIAEoDRIXCg9tZXNzYWdlX2NhcmRfaWQY",
          "AiABKA0SGAoQdGFyZ2V0X3BsYXllcl9pZBgDIAEoDRILCgNzZXEYBCABKA0i",
          "igEKFXNraWxsX21pYW9fc2hvdV9iX3RvYxIRCglwbGF5ZXJfaWQYASABKA0S",
          "FgoOZnJvbV9wbGF5ZXJfaWQYAiABKA0SEwoEY2FyZBgDIAEoCzIFLmNhcmQS",
          "FwoPbWVzc2FnZV9jYXJkX2lkGAQgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQY",
          "BSABKA0iKQoac2tpbGxfamluX2tvdV95aV9rYWlfYV90b3MSCwoDc2VxGAEg",
          "ASgNImkKGnNraWxsX2ppbl9rb3VfeWlfa2FpX2FfdG9jEhEKCXBsYXllcl9p",
          "ZBgBIAEoDRITCgRjYXJkGAIgASgLMgUuY2FyZBIWCg53YWl0aW5nX3NlY29u",
          "ZBgDIAEoDRILCgNzZXEYBCABKA0iOwoac2tpbGxfamluX2tvdV95aV9rYWlf",
          "Yl90b3MSEAoIZXhjaGFuZ2UYASABKAgSCwoDc2VxGAIgASgNIkEKGnNraWxs",
          "X2ppbl9rb3VfeWlfa2FpX2JfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIQCghl",
          "eGNoYW5nZRgCIAEoCCJcCiJza2lsbF93YWl0X2Zvcl9qaWFuZ19odV9saW5n",
          "X2FfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIWCg53YWl0aW5nX3NlY29uZBgC",
          "IAEoDRILCgNzZXEYAyABKA0iTwoZc2tpbGxfamlhbmdfaHVfbGluZ19hX3Rv",
          "cxIOCgZlbmFibGUYASABKAgSFQoFY29sb3IYAiABKA4yBi5jb2xvchILCgNz",
          "ZXEYAyABKA0iRQoZc2tpbGxfamlhbmdfaHVfbGluZ19hX3RvYxIRCglwbGF5",
          "ZXJfaWQYASABKA0SFQoFY29sb3IYAiABKA4yBi5jb2xvciJzCiJza2lsbF93",
          "YWl0X2Zvcl9qaWFuZ19odV9saW5nX2JfdG9jEhEKCXBsYXllcl9pZBgBIAEo",
          "DRIVCgVjb2xvchgCIAEoDjIGLmNvbG9yEhYKDndhaXRpbmdfc2Vjb25kGAMg",
          "ASgNEgsKA3NlcRgEIAEoDSI5Chlza2lsbF9qaWFuZ19odV9saW5nX2JfdG9z",
          "Eg8KB2NhcmRfaWQYASABKA0SCwoDc2VxGAIgASgNIj8KGXNraWxsX2ppYW5n",
          "X2h1X2xpbmdfYl90b2MSEQoJcGxheWVyX2lkGAEgASgNEg8KB2NhcmRfaWQY",
          "AiABKA0iIQoSc2tpbGxfamlfYmFuX2FfdG9zEgsKA3NlcRgBIAEoDSJMChJz",
          "a2lsbF9qaV9iYW5fYV90b2MSEQoJcGxheWVyX2lkGAEgASgNEhYKDndhaXRp",
          "bmdfc2Vjb25kGAIgASgNEgsKA3NlcRgDIAEoDSJNChJza2lsbF9qaV9iYW5f",
          "Yl90b3MSGAoQdGFyZ2V0X3BsYXllcl9pZBgBIAEoDRIQCghjYXJkX2lkcxgC",
          "IAMoDRILCgNzZXEYAyABKA0icwoSc2tpbGxfamlfYmFuX2JfdG9jEhEKCXBs",
          "YXllcl9pZBgBIAEoDRIYChB0YXJnZXRfcGxheWVyX2lkGAIgASgNEhQKBWNh",
          "cmRzGAMgAygLMgUuY2FyZBIaChJ1bmtub3duX2NhcmRfY291bnQYBCABKA0i",
          "JgoRc2tpbGxfeW91X2Rhb190b2MSEQoJcGxheWVyX2lkGAEgASgNIiAKEXNr",
          "aWxsX2JvX2FpX2FfdG9zEgsKA3NlcRgBIAEoDSJLChFza2lsbF9ib19haV9h",
          "X3RvYxIRCglwbGF5ZXJfaWQYASABKA0SFgoOd2FpdGluZ19zZWNvbmQYAiAB",
          "KA0SCwoDc2VxGAMgASgNIksKEXNraWxsX2JvX2FpX2JfdG9zEhgKEHRhcmdl",
          "dF9wbGF5ZXJfaWQYASABKA0SDwoHY2FyZF9pZBgCIAEoDRILCgNzZXEYAyAB",
          "KA0iVQoRc2tpbGxfYm9fYWlfYl90b2MSEQoJcGxheWVyX2lkGAEgASgNEhgK",
          "EHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SEwoEY2FyZBgDIAEoCzIFLmNhcmQi",
          "JwoYc2tpbGxfZ3VhbmdfZmFfYmFvX2FfdG9zEgsKA3NlcRgBIAEoDSItChhz",
          "a2lsbF9ndWFuZ19mYV9iYW9fYV90b2MSEQoJcGxheWVyX2lkGAEgASgNIlsK",
          "IXNraWxsX3dhaXRfZm9yX2d1YW5nX2ZhX2Jhb19iX3RvYxIRCglwbGF5ZXJf",
          "aWQYASABKA0SFgoOd2FpdGluZ19zZWNvbmQYAiABKA0SCwoDc2VxGAMgASgN",
          "ImMKGHNraWxsX2d1YW5nX2ZhX2Jhb19iX3RvcxIOCgZlbmFibGUYASABKAgS",
          "GAoQdGFyZ2V0X3BsYXllcl9pZBgCIAEoDRIQCghjYXJkX2lkcxgDIAMoDRIL",
          "CgNzZXEYBCABKA0ibQoYc2tpbGxfZ3VhbmdfZmFfYmFvX2JfdG9jEhEKCXBs",
          "YXllcl9pZBgBIAEoDRIOCgZlbmFibGUYAiABKAgSGAoQdGFyZ2V0X3BsYXll",
          "cl9pZBgDIAEoDRIUCgVjYXJkcxgEIAMoCzIFLmNhcmQiVwodc2tpbGxfd2Fp",
          "dF9mb3JfcWlhbmdfbGluZ190b2MSEQoJcGxheWVyX2lkGAEgASgNEhYKDndh",
          "aXRpbmdfc2Vjb25kGAIgASgNEgsKA3NlcRgDIAEoDSJOChRza2lsbF9xaWFu",
          "Z19saW5nX3RvcxIOCgZlbmFibGUYASABKAgSGQoFdHlwZXMYAiADKA4yCi5j",
          "YXJkX3R5cGUSCwoDc2VxGAMgASgNIkQKFHNraWxsX3FpYW5nX2xpbmdfdG9j",
          "EhEKCXBsYXllcl9pZBgBIAEoDRIZCgV0eXBlcxgCIAMoDjIKLmNhcmRfdHlw",
          "ZSIjChRza2lsbF9qaWFuX3Jlbl9hX3RvcxILCgNzZXEYASABKA0iYwoUc2tp",
          "bGxfamlhbl9yZW5fYV90b2MSEQoJcGxheWVyX2lkGAEgASgNEhMKBGNhcmQY",
          "AiABKAsyBS5jYXJkEhYKDndhaXRpbmdfc2Vjb25kGAMgASgNEgsKA3NlcRgE",
          "IAEoDSJOChRza2lsbF9qaWFuX3Jlbl9iX3RvcxIYChB0YXJnZXRfcGxheWVy",
          "X2lkGAEgASgNEg8KB2NhcmRfaWQYAiABKA0SCwoDc2VxGAMgASgNIlQKFHNr",
          "aWxsX2ppYW5fcmVuX2JfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIYChB0YXJn",
          "ZXRfcGxheWVyX2lkGAIgASgNEg8KB2NhcmRfaWQYAyABKA0iOwoSc2tpbGxf",
          "c291X2ppX2FfdG9zEhgKEHRhcmdldF9wbGF5ZXJfaWQYASABKA0SCwoDc2Vx",
          "GAIgASgNIpkBChJza2lsbF9zb3VfamlfYV90b2MSEQoJcGxheWVyX2lkGAEg",
          "ASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SFAoFY2FyZHMYAyADKAsy",
          "BS5jYXJkEhsKDG1lc3NhZ2VfY2FyZBgEIAEoCzIFLmNhcmQSFgoOd2FpdGlu",
          "Z19zZWNvbmQYBSABKA0SCwoDc2VxGAYgASgNIkkKEnNraWxsX3NvdV9qaV9i",
          "X3RvcxIQCghjYXJkX2lkcxgBIAMoDRIUCgxtZXNzYWdlX2NhcmQYAiABKAgS",
          "CwoDc2VxGAMgASgNInQKEnNraWxsX3NvdV9qaV9iX3RvYxIRCglwbGF5ZXJf",
          "aWQYASABKA0SGAoQdGFyZ2V0X3BsYXllcl9pZBgCIAEoDRIUCgVjYXJkcxgD",
          "IAMoCzIFLmNhcmQSGwoMbWVzc2FnZV9jYXJkGAQgASgLMgUuY2FyZCIsCh1z",
          "a2lsbF9kdWlfemhlbmdfeGlhX3lhb19hX3RvcxILCgNzZXEYASABKA0iVwod",
          "c2tpbGxfZHVpX3poZW5nX3hpYV95YW9fYV90b2MSEQoJcGxheWVyX2lkGAEg",
          "ASgNEhYKDndhaXRpbmdfc2Vjb25kGAIgASgNEgsKA3NlcRgDIAEoDSJOCh1z",
          "a2lsbF9kdWlfemhlbmdfeGlhX3lhb19iX3RvcxIOCgZlbmFibGUYASABKAgS",
          "EAoIY2FyZF9pZHMYAiADKA0SCwoDc2VxGAMgASgNIn0KHXNraWxsX2R1aV96",
          "aGVuZ194aWFfeWFvX2JfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIOCgZlbmFi",
          "bGUYAiABKAgSFAoFY2FyZHMYAyADKAsyBS5jYXJkEhYKDndhaXRpbmdfc2Vj",
          "b25kGAQgASgNEgsKA3NlcRgFIAEoDSJfCh1za2lsbF9kdWlfemhlbmdfeGlh",
          "X3lhb19jX3RvcxIYChB0YXJnZXRfcGxheWVyX2lkGAEgASgNEhcKD21lc3Nh",
          "Z2VfY2FyZF9pZBgCIAEoDRILCgNzZXEYAyABKA0iZQodc2tpbGxfZHVpX3po",
          "ZW5nX3hpYV95YW9fY190b2MSEQoJcGxheWVyX2lkGAEgASgNEhgKEHRhcmdl",
          "dF9wbGF5ZXJfaWQYAiABKA0SFwoPbWVzc2FnZV9jYXJkX2lkGAMgASgNIjsK",
          "EXNraWxsX2R1X2ppX2FfdG9zEhkKEXRhcmdldF9wbGF5ZXJfaWRzGAEgAygN",
          "EgsKA3NlcRgCIAEoDSJXChFza2lsbF9kdV9qaV9hX3RvYxIRCglwbGF5ZXJf",
          "aWQYASABKA0SGQoRdGFyZ2V0X3BsYXllcl9pZHMYAiADKA0SFAoFY2FyZHMY",
          "AyADKAsyBS5jYXJkIoEBChpza2lsbF93YWl0X2Zvcl9kdV9qaV9iX3RvYxIR",
          "CglwbGF5ZXJfaWQYASABKA0SGQoRdGFyZ2V0X3BsYXllcl9pZHMYAiADKA0S",
          "EAoIY2FyZF9pZHMYAyADKA0SFgoOd2FpdGluZ19zZWNvbmQYBCABKA0SCwoD",
          "c2VxGAUgASgNIkEKEXNraWxsX2R1X2ppX2JfdG9zEg4KBmVuYWJsZRgBIAEo",
          "CBIPCgdjYXJkX2lkGAIgASgNEgsKA3NlcRgDIAEoDSKlAQoRc2tpbGxfZHVf",
          "amlfYl90b2MSEQoJcGxheWVyX2lkGAEgASgNEg4KBmVuYWJsZRgCIAEoCBIZ",
          "ChF3YWl0aW5nX3BsYXllcl9pZBgDIAEoDRIYChB0YXJnZXRfcGxheWVyX2lk",
          "GAQgASgNEhMKBGNhcmQYBSABKAsyBS5jYXJkEhYKDndhaXRpbmdfc2Vjb25k",
          "GAYgASgNEgsKA3NlcRgHIAEoDSI4ChFza2lsbF9kdV9qaV9jX3RvcxIWCg5p",
          "bl9mcm9udF9vZl9tZRgBIAEoCBILCgNzZXEYAiABKA0icAoRc2tpbGxfZHVf",
          "amlfY190b2MSEQoJcGxheWVyX2lkGAEgASgNEhkKEXdhaXRpbmdfcGxheWVy",
          "X2lkGAIgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQYAyABKA0SEwoEY2FyZBgE",
          "IAEoCzIFLmNhcmRCFgoUY29tLmZlbmdzaGVuZy5wcm90b3NiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::CommonReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_qi_huo_ke_ju_tos), global::skill_qi_huo_ke_ju_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_qi_huo_ke_ju_toc), global::skill_qi_huo_ke_ju_toc.Parser, new[]{ "PlayerId", "CardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_gui_zha_tos), global::skill_gui_zha_tos.Parser, new[]{ "TargetPlayerId", "CardType", "WantType", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_gui_zha_toc), global::skill_gui_zha_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "CardType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_ya_huan_ya_tos), global::skill_yi_ya_huan_ya_tos.Parser, new[]{ "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_ya_huan_ya_toc), global::skill_yi_ya_huan_ya_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_hua_jie_mu_tos), global::skill_yi_hua_jie_mu_tos.Parser, new[]{ "FromPlayerId", "CardId", "ToPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_hua_jie_mu_toc), global::skill_yi_hua_jie_mu_toc.Parser, new[]{ "PlayerId", "FromPlayerId", "CardId", "ToPlayerId", "JoinIntoHand" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_tou_tian_tos), global::skill_tou_tian_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_tou_tian_toc), global::skill_tou_tian_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_huan_ri_toc), global::skill_huan_ri_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_song_tos), global::skill_ji_song_tos.Parser, new[]{ "CardIds", "MessageCard", "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_song_toc), global::skill_ji_song_toc.Parser, new[]{ "PlayerId", "MessageCard", "TargetPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_mian_li_cang_zhen_tos), global::skill_mian_li_cang_zhen_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_mian_li_cang_zhen_toc), global::skill_mian_li_cang_zhen_toc.Parser, new[]{ "PlayerId", "Card", "TargetPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_shen_tos), global::skill_jin_shen_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_shen_toc), global::skill_jin_shen_toc.Parser, new[]{ "PlayerId", "Card" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_lian_min_tos), global::skill_lian_min_tos.Parser, new[]{ "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_lian_min_toc), global::skill_lian_min_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "CardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_fu_hei_toc), global::skill_fu_hei_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_xin_si_chao_tos), global::skill_xin_si_chao_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_xin_si_chao_toc), global::skill_xin_si_chao_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_shi_si_toc), global::skill_shi_si_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_ru_gui_toc), global::skill_wait_for_ru_gui_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ru_gui_tos), global::skill_ru_gui_tos.Parser, new[]{ "Enable", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ru_gui_toc), global::skill_ru_gui_toc.Parser, new[]{ "PlayerId", "CardId", "Enable" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_zhuan_jiao_toc), global::skill_wait_for_zhuan_jiao_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_zhuan_jiao_tos), global::skill_zhuan_jiao_tos.Parser, new[]{ "Enable", "CardId", "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_zhuan_jiao_toc), global::skill_zhuan_jiao_toc.Parser, new[]{ "PlayerId", "CardId", "TargetPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ming_er_toc), global::skill_ming_er_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_zhi_tos), global::skill_ji_zhi_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_zhi_toc), global::skill_ji_zhi_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_cheng_zhi_toc), global::skill_wait_for_cheng_zhi_toc.Parser, new[]{ "PlayerId", "DiePlayerId", "Cards", "Identity", "SecretTask", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_cheng_zhi_tos), global::skill_cheng_zhi_tos.Parser, new[]{ "Enable", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_cheng_zhi_toc), global::skill_cheng_zhi_toc.Parser, new[]{ "PlayerId", "DiePlayerId", "Enable" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiu_ji_a_toc), global::skill_jiu_ji_a_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_cheng_fu_toc), global::skill_cheng_fu_toc.Parser, new[]{ "PlayerId", "FromPlayerId", "Card", "UnknownCardCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiu_ji_b_toc), global::skill_jiu_ji_b_toc.Parser, new[]{ "PlayerId", "Card", "UnknownCardCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_yi_xin_toc), global::skill_wait_for_yi_xin_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_xin_tos), global::skill_yi_xin_tos.Parser, new[]{ "Enable", "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_xin_toc), global::skill_yi_xin_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card", "Enable" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_zhi_yin_toc), global::skill_zhi_yin_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jing_meng_a_tos), global::skill_jing_meng_a_tos.Parser, new[]{ "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jing_meng_a_toc), global::skill_jing_meng_a_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Cards", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jing_meng_b_tos), global::skill_jing_meng_b_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jing_meng_b_toc), global::skill_jing_meng_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jie_dao_sha_ren_a_tos), global::skill_jie_dao_sha_ren_a_tos.Parser, new[]{ "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jie_dao_sha_ren_a_toc), global::skill_jie_dao_sha_ren_a_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jie_dao_sha_ren_b_tos), global::skill_jie_dao_sha_ren_b_tos.Parser, new[]{ "Enable", "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jie_dao_sha_ren_b_toc), global::skill_jie_dao_sha_ren_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiao_ji_a_tos), global::skill_jiao_ji_a_tos.Parser, new[]{ "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiao_ji_a_toc), global::skill_jiao_ji_a_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Cards", "UnknownCardCount", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiao_ji_b_tos), global::skill_jiao_ji_b_tos.Parser, new[]{ "CardIds", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiao_ji_b_toc), global::skill_jiao_ji_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Cards", "UnknownCardCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_miao_bi_qiao_bian_a_tos), global::skill_miao_bi_qiao_bian_a_tos.Parser, new[]{ "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_miao_bi_qiao_bian_a_toc), global::skill_miao_bi_qiao_bian_a_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "CardId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_miao_bi_qiao_bian_b_tos), global::skill_miao_bi_qiao_bian_b_tos.Parser, new[]{ "Enable", "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_miao_bi_qiao_bian_b_toc), global::skill_miao_bi_qiao_bian_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "CardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_bi_a_tos), global::skill_jin_bi_a_tos.Parser, new[]{ "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_bi_a_toc), global::skill_jin_bi_a_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_bi_b_tos), global::skill_jin_bi_b_tos.Parser, new[]{ "CardIds", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_bi_b_toc), global::skill_jin_bi_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Cards", "UnknownCardCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_miao_shou_a_tos), global::skill_miao_shou_a_tos.Parser, new[]{ "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_miao_shou_a_toc), global::skill_miao_shou_a_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Cards", "WaitingSecond", "Seq", "MessageCard" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_miao_shou_b_tos), global::skill_miao_shou_b_tos.Parser, new[]{ "CardId", "MessageCardId", "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_miao_shou_b_toc), global::skill_miao_shou_b_toc.Parser, new[]{ "PlayerId", "FromPlayerId", "Card", "MessageCardId", "TargetPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_kou_yi_kai_a_tos), global::skill_jin_kou_yi_kai_a_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_kou_yi_kai_a_toc), global::skill_jin_kou_yi_kai_a_toc.Parser, new[]{ "PlayerId", "Card", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_kou_yi_kai_b_tos), global::skill_jin_kou_yi_kai_b_tos.Parser, new[]{ "Exchange", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_kou_yi_kai_b_toc), global::skill_jin_kou_yi_kai_b_toc.Parser, new[]{ "PlayerId", "Exchange" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_jiang_hu_ling_a_toc), global::skill_wait_for_jiang_hu_ling_a_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiang_hu_ling_a_tos), global::skill_jiang_hu_ling_a_tos.Parser, new[]{ "Enable", "Color", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiang_hu_ling_a_toc), global::skill_jiang_hu_ling_a_toc.Parser, new[]{ "PlayerId", "Color" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_jiang_hu_ling_b_toc), global::skill_wait_for_jiang_hu_ling_b_toc.Parser, new[]{ "PlayerId", "Color", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiang_hu_ling_b_tos), global::skill_jiang_hu_ling_b_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiang_hu_ling_b_toc), global::skill_jiang_hu_ling_b_toc.Parser, new[]{ "PlayerId", "CardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_ban_a_tos), global::skill_ji_ban_a_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_ban_a_toc), global::skill_ji_ban_a_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_ban_b_tos), global::skill_ji_ban_b_tos.Parser, new[]{ "TargetPlayerId", "CardIds", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_ban_b_toc), global::skill_ji_ban_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Cards", "UnknownCardCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_you_dao_toc), global::skill_you_dao_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_bo_ai_a_tos), global::skill_bo_ai_a_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_bo_ai_a_toc), global::skill_bo_ai_a_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_bo_ai_b_tos), global::skill_bo_ai_b_tos.Parser, new[]{ "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_bo_ai_b_toc), global::skill_bo_ai_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_guang_fa_bao_a_tos), global::skill_guang_fa_bao_a_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_guang_fa_bao_a_toc), global::skill_guang_fa_bao_a_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_guang_fa_bao_b_toc), global::skill_wait_for_guang_fa_bao_b_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_guang_fa_bao_b_tos), global::skill_guang_fa_bao_b_tos.Parser, new[]{ "Enable", "TargetPlayerId", "CardIds", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_guang_fa_bao_b_toc), global::skill_guang_fa_bao_b_toc.Parser, new[]{ "PlayerId", "Enable", "TargetPlayerId", "Cards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_qiang_ling_toc), global::skill_wait_for_qiang_ling_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_qiang_ling_tos), global::skill_qiang_ling_tos.Parser, new[]{ "Enable", "Types_", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_qiang_ling_toc), global::skill_qiang_ling_toc.Parser, new[]{ "PlayerId", "Types_" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jian_ren_a_tos), global::skill_jian_ren_a_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jian_ren_a_toc), global::skill_jian_ren_a_toc.Parser, new[]{ "PlayerId", "Card", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jian_ren_b_tos), global::skill_jian_ren_b_tos.Parser, new[]{ "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jian_ren_b_toc), global::skill_jian_ren_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "CardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_sou_ji_a_tos), global::skill_sou_ji_a_tos.Parser, new[]{ "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_sou_ji_a_toc), global::skill_sou_ji_a_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Cards", "MessageCard", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_sou_ji_b_tos), global::skill_sou_ji_b_tos.Parser, new[]{ "CardIds", "MessageCard", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_sou_ji_b_toc), global::skill_sou_ji_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Cards", "MessageCard" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_dui_zheng_xia_yao_a_tos), global::skill_dui_zheng_xia_yao_a_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_dui_zheng_xia_yao_a_toc), global::skill_dui_zheng_xia_yao_a_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_dui_zheng_xia_yao_b_tos), global::skill_dui_zheng_xia_yao_b_tos.Parser, new[]{ "Enable", "CardIds", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_dui_zheng_xia_yao_b_toc), global::skill_dui_zheng_xia_yao_b_toc.Parser, new[]{ "PlayerId", "Enable", "Cards", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_dui_zheng_xia_yao_c_tos), global::skill_dui_zheng_xia_yao_c_tos.Parser, new[]{ "TargetPlayerId", "MessageCardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_dui_zheng_xia_yao_c_toc), global::skill_dui_zheng_xia_yao_c_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "MessageCardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_du_ji_a_tos), global::skill_du_ji_a_tos.Parser, new[]{ "TargetPlayerIds", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_du_ji_a_toc), global::skill_du_ji_a_toc.Parser, new[]{ "PlayerId", "TargetPlayerIds", "Cards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_du_ji_b_toc), global::skill_wait_for_du_ji_b_toc.Parser, new[]{ "PlayerId", "TargetPlayerIds", "CardIds", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_du_ji_b_tos), global::skill_du_ji_b_tos.Parser, new[]{ "Enable", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_du_ji_b_toc), global::skill_du_ji_b_toc.Parser, new[]{ "PlayerId", "Enable", "WaitingPlayerId", "TargetPlayerId", "Card", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_du_ji_c_tos), global::skill_du_ji_c_tos.Parser, new[]{ "InFrontOfMe", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_du_ji_c_toc), global::skill_du_ji_c_toc.Parser, new[]{ "PlayerId", "WaitingPlayerId", "TargetPlayerId", "Card" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// 毛不拔【奇货可居】：你接收双色情报后，可以从你的情报区选择一张情报加入手牌。
/// </summary>
public sealed partial class skill_qi_huo_ke_ju_tos : pb::IMessage<skill_qi_huo_ke_ju_tos> {
  private static readonly pb::MessageParser<skill_qi_huo_ke_ju_tos> _parser = new pb::MessageParser<skill_qi_huo_ke_ju_tos>(() => new skill_qi_huo_ke_ju_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_qi_huo_ke_ju_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_tos(skill_qi_huo_ke_ju_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_tos Clone() {
    return new skill_qi_huo_ke_ju_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_qi_huo_ke_ju_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_qi_huo_ke_ju_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_qi_huo_ke_ju_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【奇货可居】
/// </summary>
public sealed partial class skill_qi_huo_ke_ju_toc : pb::IMessage<skill_qi_huo_ke_ju_toc> {
  private static readonly pb::MessageParser<skill_qi_huo_ke_ju_toc> _parser = new pb::MessageParser<skill_qi_huo_ke_ju_toc>(() => new skill_qi_huo_ke_ju_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_qi_huo_ke_ju_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_toc(skill_qi_huo_ke_ju_toc other) : this() {
    playerId_ = other.playerId_;
    cardId_ = other.cardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_toc Clone() {
    return new skill_qi_huo_ke_ju_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_qi_huo_ke_ju_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_qi_huo_ke_ju_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (CardId != other.CardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_qi_huo_ke_ju_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 肥原龙川【诡诈】：出牌阶段限一次，你可以指定一名角色，然后视为你对其使用了一张【威逼】或【利诱】。
/// </summary>
public sealed partial class skill_gui_zha_tos : pb::IMessage<skill_gui_zha_tos> {
  private static readonly pb::MessageParser<skill_gui_zha_tos> _parser = new pb::MessageParser<skill_gui_zha_tos>(() => new skill_gui_zha_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_gui_zha_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_tos(skill_gui_zha_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardType_ = other.cardType_;
    wantType_ = other.wantType_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_tos Clone() {
    return new skill_gui_zha_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_type" field.</summary>
  public const int CardTypeFieldNumber = 2;
  private global::card_type cardType_ = global::card_type.ChengQing;
  /// <summary>
  /// 威逼还是利诱
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type CardType {
    get { return cardType_; }
    set {
      cardType_ = value;
    }
  }

  /// <summary>Field number for the "want_type" field.</summary>
  public const int WantTypeFieldNumber = 3;
  private global::card_type wantType_ = global::card_type.ChengQing;
  /// <summary>
  /// 如果是威逼，还需要填威逼的卡牌类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type WantType {
    get { return wantType_; }
    set {
      wantType_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_gui_zha_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_gui_zha_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardType != other.CardType) return false;
    if (WantType != other.WantType) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardType != global::card_type.ChengQing) hash ^= CardType.GetHashCode();
    if (WantType != global::card_type.ChengQing) hash ^= WantType.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardType != global::card_type.ChengQing) {
      output.WriteRawTag(16);
      output.WriteEnum((int) CardType);
    }
    if (WantType != global::card_type.ChengQing) {
      output.WriteRawTag(24);
      output.WriteEnum((int) WantType);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardType);
    }
    if (WantType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WantType);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_gui_zha_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardType != global::card_type.ChengQing) {
      CardType = other.CardType;
    }
    if (other.WantType != global::card_type.ChengQing) {
      WantType = other.WantType;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardType = (global::card_type) input.ReadEnum();
          break;
        }
        case 24: {
          WantType = (global::card_type) input.ReadEnum();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【诡诈】
/// </summary>
public sealed partial class skill_gui_zha_toc : pb::IMessage<skill_gui_zha_toc> {
  private static readonly pb::MessageParser<skill_gui_zha_toc> _parser = new pb::MessageParser<skill_gui_zha_toc>(() => new skill_gui_zha_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_gui_zha_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_toc(skill_gui_zha_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cardType_ = other.cardType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_toc Clone() {
    return new skill_gui_zha_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_type" field.</summary>
  public const int CardTypeFieldNumber = 3;
  private global::card_type cardType_ = global::card_type.ChengQing;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type CardType {
    get { return cardType_; }
    set {
      cardType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_gui_zha_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_gui_zha_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardType != other.CardType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardType != global::card_type.ChengQing) hash ^= CardType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardType != global::card_type.ChengQing) {
      output.WriteRawTag(24);
      output.WriteEnum((int) CardType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_gui_zha_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardType != global::card_type.ChengQing) {
      CardType = other.CardType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardType = (global::card_type) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 王魁【以牙还牙】：你接收黑色情报后，可以将一张黑色手牌置入情报传出者或其相邻角色的情报区，然后摸一张牌。
/// </summary>
public sealed partial class skill_yi_ya_huan_ya_tos : pb::IMessage<skill_yi_ya_huan_ya_tos> {
  private static readonly pb::MessageParser<skill_yi_ya_huan_ya_tos> _parser = new pb::MessageParser<skill_yi_ya_huan_ya_tos>(() => new skill_yi_ya_huan_ya_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_ya_huan_ya_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_tos(skill_yi_ya_huan_ya_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_tos Clone() {
    return new skill_yi_ya_huan_ya_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_ya_huan_ya_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_ya_huan_ya_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_ya_huan_ya_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【以牙还牙】
/// </summary>
public sealed partial class skill_yi_ya_huan_ya_toc : pb::IMessage<skill_yi_ya_huan_ya_toc> {
  private static readonly pb::MessageParser<skill_yi_ya_huan_ya_toc> _parser = new pb::MessageParser<skill_yi_ya_huan_ya_toc>(() => new skill_yi_ya_huan_ya_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_ya_huan_ya_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_toc(skill_yi_ya_huan_ya_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_toc Clone() {
    return new skill_yi_ya_huan_ya_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_ya_huan_ya_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_ya_huan_ya_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_ya_huan_ya_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 韩梅【移花接木】：争夺阶段，你可以翻开此角色牌，然后从一名角色的情报区选择一张情报，将其置入另一名角色的情报区，若如此做会让其收集三张或更多同色情报，则改为将该情牌加入你的手牌。
/// </summary>
public sealed partial class skill_yi_hua_jie_mu_tos : pb::IMessage<skill_yi_hua_jie_mu_tos> {
  private static readonly pb::MessageParser<skill_yi_hua_jie_mu_tos> _parser = new pb::MessageParser<skill_yi_hua_jie_mu_tos>(() => new skill_yi_hua_jie_mu_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_hua_jie_mu_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_tos(skill_yi_hua_jie_mu_tos other) : this() {
    fromPlayerId_ = other.fromPlayerId_;
    cardId_ = other.cardId_;
    toPlayerId_ = other.toPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_tos Clone() {
    return new skill_yi_hua_jie_mu_tos(this);
  }

  /// <summary>Field number for the "from_player_id" field.</summary>
  public const int FromPlayerIdFieldNumber = 1;
  private uint fromPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FromPlayerId {
    get { return fromPlayerId_; }
    set {
      fromPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "to_player_id" field.</summary>
  public const int ToPlayerIdFieldNumber = 3;
  private uint toPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ToPlayerId {
    get { return toPlayerId_; }
    set {
      toPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_hua_jie_mu_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_hua_jie_mu_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FromPlayerId != other.FromPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (ToPlayerId != other.ToPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FromPlayerId != 0) hash ^= FromPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (ToPlayerId != 0) hash ^= ToPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FromPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(FromPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (ToPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(ToPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FromPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (ToPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_hua_jie_mu_tos other) {
    if (other == null) {
      return;
    }
    if (other.FromPlayerId != 0) {
      FromPlayerId = other.FromPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.ToPlayerId != 0) {
      ToPlayerId = other.ToPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FromPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          ToPlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【移花接木】
/// </summary>
public sealed partial class skill_yi_hua_jie_mu_toc : pb::IMessage<skill_yi_hua_jie_mu_toc> {
  private static readonly pb::MessageParser<skill_yi_hua_jie_mu_toc> _parser = new pb::MessageParser<skill_yi_hua_jie_mu_toc>(() => new skill_yi_hua_jie_mu_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_hua_jie_mu_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_toc(skill_yi_hua_jie_mu_toc other) : this() {
    playerId_ = other.playerId_;
    fromPlayerId_ = other.fromPlayerId_;
    cardId_ = other.cardId_;
    toPlayerId_ = other.toPlayerId_;
    joinIntoHand_ = other.joinIntoHand_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_toc Clone() {
    return new skill_yi_hua_jie_mu_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "from_player_id" field.</summary>
  public const int FromPlayerIdFieldNumber = 2;
  private uint fromPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FromPlayerId {
    get { return fromPlayerId_; }
    set {
      fromPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "to_player_id" field.</summary>
  public const int ToPlayerIdFieldNumber = 4;
  private uint toPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ToPlayerId {
    get { return toPlayerId_; }
    set {
      toPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "join_into_hand" field.</summary>
  public const int JoinIntoHandFieldNumber = 5;
  private bool joinIntoHand_;
  /// <summary>
  /// 是否改为加入手牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool JoinIntoHand {
    get { return joinIntoHand_; }
    set {
      joinIntoHand_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_hua_jie_mu_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_hua_jie_mu_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (FromPlayerId != other.FromPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (ToPlayerId != other.ToPlayerId) return false;
    if (JoinIntoHand != other.JoinIntoHand) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (FromPlayerId != 0) hash ^= FromPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (ToPlayerId != 0) hash ^= ToPlayerId.GetHashCode();
    if (JoinIntoHand != false) hash ^= JoinIntoHand.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (FromPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(FromPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (ToPlayerId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ToPlayerId);
    }
    if (JoinIntoHand != false) {
      output.WriteRawTag(40);
      output.WriteBool(JoinIntoHand);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (FromPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (ToPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToPlayerId);
    }
    if (JoinIntoHand != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_hua_jie_mu_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.FromPlayerId != 0) {
      FromPlayerId = other.FromPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.ToPlayerId != 0) {
      ToPlayerId = other.ToPlayerId;
    }
    if (other.JoinIntoHand != false) {
      JoinIntoHand = other.JoinIntoHand;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          FromPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
        case 32: {
          ToPlayerId = input.ReadUInt32();
          break;
        }
        case 40: {
          JoinIntoHand = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 鄭文先【偷天】：争夺阶段你可以翻开此角色牌，然后视为你使用了一张【截获】。
/// </summary>
public sealed partial class skill_tou_tian_tos : pb::IMessage<skill_tou_tian_tos> {
  private static readonly pb::MessageParser<skill_tou_tian_tos> _parser = new pb::MessageParser<skill_tou_tian_tos>(() => new skill_tou_tian_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_tou_tian_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_tos(skill_tou_tian_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_tos Clone() {
    return new skill_tou_tian_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_tou_tian_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_tou_tian_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_tou_tian_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【偷天】
/// </summary>
public sealed partial class skill_tou_tian_toc : pb::IMessage<skill_tou_tian_toc> {
  private static readonly pb::MessageParser<skill_tou_tian_toc> _parser = new pb::MessageParser<skill_tou_tian_toc>(() => new skill_tou_tian_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_tou_tian_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_toc(skill_tou_tian_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_toc Clone() {
    return new skill_tou_tian_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_tou_tian_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_tou_tian_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_tou_tian_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【换日】：你使用【调包】或【破译】后，可以将你的角色牌翻至面朝下。
/// </summary>
public sealed partial class skill_huan_ri_toc : pb::IMessage<skill_huan_ri_toc> {
  private static readonly pb::MessageParser<skill_huan_ri_toc> _parser = new pb::MessageParser<skill_huan_ri_toc>(() => new skill_huan_ri_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_huan_ri_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_huan_ri_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_huan_ri_toc(skill_huan_ri_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_huan_ri_toc Clone() {
    return new skill_huan_ri_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_huan_ri_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_huan_ri_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_huan_ri_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 鬼脚【急送】：争夺阶段限一次，你可以弃置两张手牌，或从你的情报区弃置一张非黑色情报，然后将待收情报移至一名角色面前。
/// </summary>
public sealed partial class skill_ji_song_tos : pb::IMessage<skill_ji_song_tos> {
  private static readonly pb::MessageParser<skill_ji_song_tos> _parser = new pb::MessageParser<skill_ji_song_tos>(() => new skill_ji_song_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_song_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_tos(skill_ji_song_tos other) : this() {
    cardIds_ = other.cardIds_.Clone();
    messageCard_ = other.messageCard_;
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_tos Clone() {
    return new skill_ji_song_tos(this);
  }

  /// <summary>Field number for the "card_ids" field.</summary>
  public const int CardIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_cardIds_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> cardIds_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// 弃置的两张手牌，和下面的情报二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardIds {
    get { return cardIds_; }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 2;
  private uint messageCard_;
  /// <summary>
  /// 弃置的情报，和上面的手牌二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_song_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_song_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cardIds_.Equals(other.cardIds_)) return false;
    if (MessageCard != other.MessageCard) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cardIds_.GetHashCode();
    if (MessageCard != 0) hash ^= MessageCard.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cardIds_.WriteTo(output, _repeated_cardIds_codec);
    if (MessageCard != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(MessageCard);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cardIds_.CalculateSize(_repeated_cardIds_codec);
    if (MessageCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageCard);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_song_tos other) {
    if (other == null) {
      return;
    }
    cardIds_.Add(other.cardIds_);
    if (other.MessageCard != 0) {
      MessageCard = other.MessageCard;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
          break;
        }
        case 16: {
          MessageCard = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【急送】
/// </summary>
public sealed partial class skill_ji_song_toc : pb::IMessage<skill_ji_song_toc> {
  private static readonly pb::MessageParser<skill_ji_song_toc> _parser = new pb::MessageParser<skill_ji_song_toc>(() => new skill_ji_song_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_song_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_toc(skill_ji_song_toc other) : this() {
    playerId_ = other.playerId_;
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    targetPlayerId_ = other.targetPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_toc Clone() {
    return new skill_ji_song_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 2;
  private global::card messageCard_;
  /// <summary>
  /// 弃置的情报（如果弃置手牌则走弃牌协议）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_song_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_song_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (messageCard_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(MessageCard);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_song_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 邵秀【绵里藏针】：你传出的情报被接收后，可以将一张黑色手牌置入接收者的情报区，然后摸一张牌。
/// </summary>
public sealed partial class skill_mian_li_cang_zhen_tos : pb::IMessage<skill_mian_li_cang_zhen_tos> {
  private static readonly pb::MessageParser<skill_mian_li_cang_zhen_tos> _parser = new pb::MessageParser<skill_mian_li_cang_zhen_tos>(() => new skill_mian_li_cang_zhen_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_mian_li_cang_zhen_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_tos(skill_mian_li_cang_zhen_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_tos Clone() {
    return new skill_mian_li_cang_zhen_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_mian_li_cang_zhen_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_mian_li_cang_zhen_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_mian_li_cang_zhen_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【绵里藏针】
/// </summary>
public sealed partial class skill_mian_li_cang_zhen_toc : pb::IMessage<skill_mian_li_cang_zhen_toc> {
  private static readonly pb::MessageParser<skill_mian_li_cang_zhen_toc> _parser = new pb::MessageParser<skill_mian_li_cang_zhen_toc>(() => new skill_mian_li_cang_zhen_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_mian_li_cang_zhen_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_toc(skill_mian_li_cang_zhen_toc other) : this() {
    playerId_ = other.playerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    targetPlayerId_ = other.targetPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_toc Clone() {
    return new skill_mian_li_cang_zhen_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 2;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_mian_li_cang_zhen_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_mian_li_cang_zhen_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Card);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_mian_li_cang_zhen_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 金生火【谨慎】：你接收双色情报后，可以用一张手牌与该情报面朝上互换。
/// </summary>
public sealed partial class skill_jin_shen_tos : pb::IMessage<skill_jin_shen_tos> {
  private static readonly pb::MessageParser<skill_jin_shen_tos> _parser = new pb::MessageParser<skill_jin_shen_tos>(() => new skill_jin_shen_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_shen_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_tos(skill_jin_shen_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_tos Clone() {
    return new skill_jin_shen_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_shen_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_shen_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_shen_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【谨慎】
/// </summary>
public sealed partial class skill_jin_shen_toc : pb::IMessage<skill_jin_shen_toc> {
  private static readonly pb::MessageParser<skill_jin_shen_toc> _parser = new pb::MessageParser<skill_jin_shen_toc>(() => new skill_jin_shen_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_shen_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_toc(skill_jin_shen_toc other) : this() {
    playerId_ = other.playerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_toc Clone() {
    return new skill_jin_shen_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 2;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_shen_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_shen_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_shen_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 白菲菲【怜悯】：你传出的非黑色情报被接收后，可以从你或接收者的情报区选择一张黑色情报加入你的手牌。
/// </summary>
public sealed partial class skill_lian_min_tos : pb::IMessage<skill_lian_min_tos> {
  private static readonly pb::MessageParser<skill_lian_min_tos> _parser = new pb::MessageParser<skill_lian_min_tos>(() => new skill_lian_min_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_lian_min_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_tos(skill_lian_min_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_tos Clone() {
    return new skill_lian_min_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_lian_min_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_lian_min_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_lian_min_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【怜悯】
/// </summary>
public sealed partial class skill_lian_min_toc : pb::IMessage<skill_lian_min_toc> {
  private static readonly pb::MessageParser<skill_lian_min_toc> _parser = new pb::MessageParser<skill_lian_min_toc>(() => new skill_lian_min_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_lian_min_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_toc(skill_lian_min_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_toc Clone() {
    return new skill_lian_min_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_lian_min_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_lian_min_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_lian_min_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【腹黑】：你传出的黑色情报被接收后，你摸一张牌。
/// </summary>
public sealed partial class skill_fu_hei_toc : pb::IMessage<skill_fu_hei_toc> {
  private static readonly pb::MessageParser<skill_fu_hei_toc> _parser = new pb::MessageParser<skill_fu_hei_toc>(() => new skill_fu_hei_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_fu_hei_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_fu_hei_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_fu_hei_toc(skill_fu_hei_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_fu_hei_toc Clone() {
    return new skill_fu_hei_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_fu_hei_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_fu_hei_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_fu_hei_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 端木静【新思潮】：出牌阶段限一次，你可以弃置一张手牌，然后摸两张牌。
/// </summary>
public sealed partial class skill_xin_si_chao_tos : pb::IMessage<skill_xin_si_chao_tos> {
  private static readonly pb::MessageParser<skill_xin_si_chao_tos> _parser = new pb::MessageParser<skill_xin_si_chao_tos>(() => new skill_xin_si_chao_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_xin_si_chao_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_tos(skill_xin_si_chao_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_tos Clone() {
    return new skill_xin_si_chao_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_xin_si_chao_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_xin_si_chao_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_xin_si_chao_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【新思潮】，弃牌和摸牌走原本的协议
/// </summary>
public sealed partial class skill_xin_si_chao_toc : pb::IMessage<skill_xin_si_chao_toc> {
  private static readonly pb::MessageParser<skill_xin_si_chao_toc> _parser = new pb::MessageParser<skill_xin_si_chao_toc>(() => new skill_xin_si_chao_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_xin_si_chao_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_toc(skill_xin_si_chao_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_toc Clone() {
    return new skill_xin_si_chao_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_xin_si_chao_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_xin_si_chao_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_xin_si_chao_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【视死】：你接收黑色情报后，摸两张牌
/// </summary>
public sealed partial class skill_shi_si_toc : pb::IMessage<skill_shi_si_toc> {
  private static readonly pb::MessageParser<skill_shi_si_toc> _parser = new pb::MessageParser<skill_shi_si_toc>(() => new skill_shi_si_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_shi_si_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_shi_si_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_shi_si_toc(skill_shi_si_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_shi_si_toc Clone() {
    return new skill_shi_si_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_shi_si_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_shi_si_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_shi_si_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【如归】
/// </summary>
public sealed partial class skill_wait_for_ru_gui_toc : pb::IMessage<skill_wait_for_ru_gui_toc> {
  private static readonly pb::MessageParser<skill_wait_for_ru_gui_toc> _parser = new pb::MessageParser<skill_wait_for_ru_gui_toc>(() => new skill_wait_for_ru_gui_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_ru_gui_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_ru_gui_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_ru_gui_toc(skill_wait_for_ru_gui_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_ru_gui_toc Clone() {
    return new skill_wait_for_ru_gui_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_ru_gui_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_ru_gui_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_ru_gui_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 老汉【如归】：你死亡前，可以将你情报区中的一张情报置入当前回合角色的情报区中。
/// </summary>
public sealed partial class skill_ru_gui_tos : pb::IMessage<skill_ru_gui_tos> {
  private static readonly pb::MessageParser<skill_ru_gui_tos> _parser = new pb::MessageParser<skill_ru_gui_tos>(() => new skill_ru_gui_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ru_gui_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_tos(skill_ru_gui_tos other) : this() {
    enable_ = other.enable_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_tos Clone() {
    return new skill_ru_gui_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ru_gui_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ru_gui_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ru_gui_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【如归】
/// </summary>
public sealed partial class skill_ru_gui_toc : pb::IMessage<skill_ru_gui_toc> {
  private static readonly pb::MessageParser<skill_ru_gui_toc> _parser = new pb::MessageParser<skill_ru_gui_toc>(() => new skill_ru_gui_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ru_gui_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_toc(skill_ru_gui_toc other) : this() {
    playerId_ = other.playerId_;
    cardId_ = other.cardId_;
    enable_ = other.enable_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_toc Clone() {
    return new skill_ru_gui_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 3;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ru_gui_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ru_gui_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Enable != other.Enable) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Enable != false) {
      output.WriteRawTag(24);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Enable != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ru_gui_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【转交】
/// </summary>
public sealed partial class skill_wait_for_zhuan_jiao_toc : pb::IMessage<skill_wait_for_zhuan_jiao_toc> {
  private static readonly pb::MessageParser<skill_wait_for_zhuan_jiao_toc> _parser = new pb::MessageParser<skill_wait_for_zhuan_jiao_toc>(() => new skill_wait_for_zhuan_jiao_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_zhuan_jiao_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_zhuan_jiao_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_zhuan_jiao_toc(skill_wait_for_zhuan_jiao_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_zhuan_jiao_toc Clone() {
    return new skill_wait_for_zhuan_jiao_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_zhuan_jiao_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_zhuan_jiao_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_zhuan_jiao_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 白小年【转交】：你使用一张手牌后，可以从你的情报区选择一张非黑色情报，将其置入另一名角色的情报区，然后你摸两张牌。你不能通过此技能让任何角色收集三张或更多同色情报。
/// </summary>
public sealed partial class skill_zhuan_jiao_tos : pb::IMessage<skill_zhuan_jiao_tos> {
  private static readonly pb::MessageParser<skill_zhuan_jiao_tos> _parser = new pb::MessageParser<skill_zhuan_jiao_tos>(() => new skill_zhuan_jiao_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_zhuan_jiao_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_tos(skill_zhuan_jiao_tos other) : this() {
    enable_ = other.enable_;
    cardId_ = other.cardId_;
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_tos Clone() {
    return new skill_zhuan_jiao_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_zhuan_jiao_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_zhuan_jiao_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (CardId != other.CardId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_zhuan_jiao_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【转交】
/// </summary>
public sealed partial class skill_zhuan_jiao_toc : pb::IMessage<skill_zhuan_jiao_toc> {
  private static readonly pb::MessageParser<skill_zhuan_jiao_toc> _parser = new pb::MessageParser<skill_zhuan_jiao_toc>(() => new skill_zhuan_jiao_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_zhuan_jiao_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_toc(skill_zhuan_jiao_toc other) : this() {
    playerId_ = other.playerId_;
    cardId_ = other.cardId_;
    targetPlayerId_ = other.targetPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_toc Clone() {
    return new skill_zhuan_jiao_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_zhuan_jiao_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_zhuan_jiao_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (CardId != other.CardId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_zhuan_jiao_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【明饵】：你传出的红色或蓝色情报被接收后，你和接收者各摸一张牌。
/// </summary>
public sealed partial class skill_ming_er_toc : pb::IMessage<skill_ming_er_toc> {
  private static readonly pb::MessageParser<skill_ming_er_toc> _parser = new pb::MessageParser<skill_ming_er_toc>(() => new skill_ming_er_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ming_er_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ming_er_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ming_er_toc(skill_ming_er_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ming_er_toc Clone() {
    return new skill_ming_er_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ming_er_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ming_er_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ming_er_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 顾小梦【集智】：一名角色濒死时，或争夺阶段，你可以翻开此角色牌，然后摸四张牌。
/// </summary>
public sealed partial class skill_ji_zhi_tos : pb::IMessage<skill_ji_zhi_tos> {
  private static readonly pb::MessageParser<skill_ji_zhi_tos> _parser = new pb::MessageParser<skill_ji_zhi_tos>(() => new skill_ji_zhi_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_zhi_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_tos(skill_ji_zhi_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_tos Clone() {
    return new skill_ji_zhi_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_zhi_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_zhi_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_zhi_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【集智】
/// </summary>
public sealed partial class skill_ji_zhi_toc : pb::IMessage<skill_ji_zhi_toc> {
  private static readonly pb::MessageParser<skill_ji_zhi_toc> _parser = new pb::MessageParser<skill_ji_zhi_toc>(() => new skill_ji_zhi_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_zhi_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_toc(skill_ji_zhi_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_toc Clone() {
    return new skill_ji_zhi_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_zhi_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_zhi_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_zhi_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【承志】
/// </summary>
public sealed partial class skill_wait_for_cheng_zhi_toc : pb::IMessage<skill_wait_for_cheng_zhi_toc> {
  private static readonly pb::MessageParser<skill_wait_for_cheng_zhi_toc> _parser = new pb::MessageParser<skill_wait_for_cheng_zhi_toc>(() => new skill_wait_for_cheng_zhi_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_cheng_zhi_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_cheng_zhi_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_cheng_zhi_toc(skill_wait_for_cheng_zhi_toc other) : this() {
    playerId_ = other.playerId_;
    diePlayerId_ = other.diePlayerId_;
    cards_ = other.cards_.Clone();
    identity_ = other.identity_;
    secretTask_ = other.secretTask_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_cheng_zhi_toc Clone() {
    return new skill_wait_for_cheng_zhi_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 发动者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "die_player_id" field.</summary>
  public const int DiePlayerIdFieldNumber = 2;
  private uint diePlayerId_;
  /// <summary>
  /// 死亡角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DiePlayerId {
    get { return diePlayerId_; }
    set {
      diePlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 死亡角色的所有手牌（只有发动者能看到）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "identity" field.</summary>
  public const int IdentityFieldNumber = 4;
  private global::color identity_ = global::color.Black;
  /// <summary>
  /// 死亡角色的身份牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::color Identity {
    get { return identity_; }
    set {
      identity_ = value;
    }
  }

  /// <summary>Field number for the "secret_task" field.</summary>
  public const int SecretTaskFieldNumber = 5;
  private global::secret_task secretTask_ = global::secret_task.Killer;
  /// <summary>
  /// 死亡角色的机密任务（如果是神秘人）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::secret_task SecretTask {
    get { return secretTask_; }
    set {
      secretTask_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 6;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 7;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_cheng_zhi_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_cheng_zhi_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (DiePlayerId != other.DiePlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (Identity != other.Identity) return false;
    if (SecretTask != other.SecretTask) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (DiePlayerId != 0) hash ^= DiePlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (Identity != global::color.Black) hash ^= Identity.GetHashCode();
    if (SecretTask != global::secret_task.Killer) hash ^= SecretTask.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (DiePlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(DiePlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (Identity != global::color.Black) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      output.WriteRawTag(40);
      output.WriteEnum((int) SecretTask);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (DiePlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiePlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (Identity != global::color.Black) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecretTask);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_cheng_zhi_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.DiePlayerId != 0) {
      DiePlayerId = other.DiePlayerId;
    }
    cards_.Add(other.cards_);
    if (other.Identity != global::color.Black) {
      Identity = other.Identity;
    }
    if (other.SecretTask != global::secret_task.Killer) {
      SecretTask = other.SecretTask;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          DiePlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 32: {
          Identity = (global::color) input.ReadEnum();
          break;
        }
        case 40: {
          SecretTask = (global::secret_task) input.ReadEnum();
          break;
        }
        case 48: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 56: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 顾小梦【承志】：一名其他角色死亡前，若此角色牌已翻开，则你获得其所有手牌，并查看其身份牌，你可以获得该身份牌，并将你原本的身份牌面朝下移出游戏。
/// </summary>
public sealed partial class skill_cheng_zhi_tos : pb::IMessage<skill_cheng_zhi_tos> {
  private static readonly pb::MessageParser<skill_cheng_zhi_tos> _parser = new pb::MessageParser<skill_cheng_zhi_tos>(() => new skill_cheng_zhi_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_cheng_zhi_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_tos(skill_cheng_zhi_tos other) : this() {
    enable_ = other.enable_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_tos Clone() {
    return new skill_cheng_zhi_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_cheng_zhi_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_cheng_zhi_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_cheng_zhi_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【承志】
/// </summary>
public sealed partial class skill_cheng_zhi_toc : pb::IMessage<skill_cheng_zhi_toc> {
  private static readonly pb::MessageParser<skill_cheng_zhi_toc> _parser = new pb::MessageParser<skill_cheng_zhi_toc>(() => new skill_cheng_zhi_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_cheng_zhi_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_toc(skill_cheng_zhi_toc other) : this() {
    playerId_ = other.playerId_;
    diePlayerId_ = other.diePlayerId_;
    enable_ = other.enable_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_toc Clone() {
    return new skill_cheng_zhi_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 发动者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "die_player_id" field.</summary>
  public const int DiePlayerIdFieldNumber = 2;
  private uint diePlayerId_;
  /// <summary>
  /// 死亡角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DiePlayerId {
    get { return diePlayerId_; }
    set {
      diePlayerId_ = value;
    }
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 3;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_cheng_zhi_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_cheng_zhi_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (DiePlayerId != other.DiePlayerId) return false;
    if (Enable != other.Enable) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (DiePlayerId != 0) hash ^= DiePlayerId.GetHashCode();
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (DiePlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(DiePlayerId);
    }
    if (Enable != false) {
      output.WriteRawTag(24);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (DiePlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiePlayerId);
    }
    if (Enable != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_cheng_zhi_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.DiePlayerId != 0) {
      DiePlayerId = other.DiePlayerId;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          DiePlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【就计】A：你被【试探】【威逼】或【利诱】指定为目标后，你可以翻开此角色牌，然后摸两张牌。
/// </summary>
public sealed partial class skill_jiu_ji_a_toc : pb::IMessage<skill_jiu_ji_a_toc> {
  private static readonly pb::MessageParser<skill_jiu_ji_a_toc> _parser = new pb::MessageParser<skill_jiu_ji_a_toc>(() => new skill_jiu_ji_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiu_ji_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_a_toc(skill_jiu_ji_a_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_a_toc Clone() {
    return new skill_jiu_ji_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiu_ji_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiu_ji_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiu_ji_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【城府】：【试探】和【威逼】对你无效。
/// </summary>
public sealed partial class skill_cheng_fu_toc : pb::IMessage<skill_cheng_fu_toc> {
  private static readonly pb::MessageParser<skill_cheng_fu_toc> _parser = new pb::MessageParser<skill_cheng_fu_toc>(() => new skill_cheng_fu_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_cheng_fu_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_fu_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_fu_toc(skill_cheng_fu_toc other) : this() {
    playerId_ = other.playerId_;
    fromPlayerId_ = other.fromPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    unknownCardCount_ = other.unknownCardCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_fu_toc Clone() {
    return new skill_cheng_fu_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "from_player_id" field.</summary>
  public const int FromPlayerIdFieldNumber = 2;
  private uint fromPlayerId_;
  /// <summary>
  /// 使用那张牌的玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FromPlayerId {
    get { return fromPlayerId_; }
    set {
      fromPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 使用的那张牌。因为肥原龙川可以视为使用了【威逼】，因此这个字段可能为空。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 4;
  private uint unknownCardCount_;
  /// <summary>
  /// 如果是【试探】且结算后要被李宁玉拿走时，其他人将会看不到这张牌。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_cheng_fu_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_cheng_fu_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (FromPlayerId != other.FromPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (FromPlayerId != 0) hash ^= FromPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (FromPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(FromPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (UnknownCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(UnknownCardCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (FromPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_cheng_fu_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.FromPlayerId != 0) {
      FromPlayerId = other.FromPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          FromPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 32: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【就计】B：并在触发此技能的卡牌结算后，将其加入你的手牌。
/// </summary>
public sealed partial class skill_jiu_ji_b_toc : pb::IMessage<skill_jiu_ji_b_toc> {
  private static readonly pb::MessageParser<skill_jiu_ji_b_toc> _parser = new pb::MessageParser<skill_jiu_ji_b_toc>(() => new skill_jiu_ji_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiu_ji_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_b_toc(skill_jiu_ji_b_toc other) : this() {
    playerId_ = other.playerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    unknownCardCount_ = other.unknownCardCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_b_toc Clone() {
    return new skill_jiu_ji_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 2;
  private global::card card_;
  /// <summary>
  /// 拿走的那张卡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 3;
  private uint unknownCardCount_;
  /// <summary>
  /// 如果是【试探】且结算后要被李宁玉拿走时，其他人将会看不到这张牌。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiu_ji_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiu_ji_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Card);
    }
    if (UnknownCardCount != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(UnknownCardCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiu_ji_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 24: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【遗信】
/// </summary>
public sealed partial class skill_wait_for_yi_xin_toc : pb::IMessage<skill_wait_for_yi_xin_toc> {
  private static readonly pb::MessageParser<skill_wait_for_yi_xin_toc> _parser = new pb::MessageParser<skill_wait_for_yi_xin_toc>(() => new skill_wait_for_yi_xin_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_yi_xin_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_yi_xin_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_yi_xin_toc(skill_wait_for_yi_xin_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_yi_xin_toc Clone() {
    return new skill_wait_for_yi_xin_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_yi_xin_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_yi_xin_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_yi_xin_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 李宁玉【遗信】：你死亡前，可以将一张手牌置入另一名角色的情报区。
/// </summary>
public sealed partial class skill_yi_xin_tos : pb::IMessage<skill_yi_xin_tos> {
  private static readonly pb::MessageParser<skill_yi_xin_tos> _parser = new pb::MessageParser<skill_yi_xin_tos>(() => new skill_yi_xin_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_xin_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_tos(skill_yi_xin_tos other) : this() {
    enable_ = other.enable_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_tos Clone() {
    return new skill_yi_xin_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_xin_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_xin_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_xin_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【遗信】
/// </summary>
public sealed partial class skill_yi_xin_toc : pb::IMessage<skill_yi_xin_toc> {
  private static readonly pb::MessageParser<skill_yi_xin_toc> _parser = new pb::MessageParser<skill_yi_xin_toc>(() => new skill_yi_xin_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_xin_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_toc(skill_yi_xin_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    enable_ = other.enable_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_toc Clone() {
    return new skill_yi_xin_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 4;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_xin_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_xin_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (Enable != other.Enable) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (Enable != false) {
      output.WriteRawTag(32);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (Enable != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_xin_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 32: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【知音】：你接收红色或蓝色情报后，你和传出者各摸一张牌
/// </summary>
public sealed partial class skill_zhi_yin_toc : pb::IMessage<skill_zhi_yin_toc> {
  private static readonly pb::MessageParser<skill_zhi_yin_toc> _parser = new pb::MessageParser<skill_zhi_yin_toc>(() => new skill_zhi_yin_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_zhi_yin_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhi_yin_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhi_yin_toc(skill_zhi_yin_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhi_yin_toc Clone() {
    return new skill_zhi_yin_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_zhi_yin_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_zhi_yin_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_zhi_yin_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 程小蝶【惊梦】A：你接收黑色情报后，可以查看一名角色的手牌。
/// </summary>
public sealed partial class skill_jing_meng_a_tos : pb::IMessage<skill_jing_meng_a_tos> {
  private static readonly pb::MessageParser<skill_jing_meng_a_tos> _parser = new pb::MessageParser<skill_jing_meng_a_tos>(() => new skill_jing_meng_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jing_meng_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_a_tos(skill_jing_meng_a_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_a_tos Clone() {
    return new skill_jing_meng_a_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jing_meng_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jing_meng_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jing_meng_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【惊梦】A
/// </summary>
public sealed partial class skill_jing_meng_a_toc : pb::IMessage<skill_jing_meng_a_toc> {
  private static readonly pb::MessageParser<skill_jing_meng_a_toc> _parser = new pb::MessageParser<skill_jing_meng_a_toc>(() => new skill_jing_meng_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jing_meng_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_a_toc(skill_jing_meng_a_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_a_toc Clone() {
    return new skill_jing_meng_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 目标角色的手牌，只有你能看到这个字段，其他人为空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 4;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jing_meng_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jing_meng_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (WaitingSecond != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jing_meng_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 32: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 程小蝶【惊梦】B：然后从中选择一张弃置。
/// </summary>
public sealed partial class skill_jing_meng_b_tos : pb::IMessage<skill_jing_meng_b_tos> {
  private static readonly pb::MessageParser<skill_jing_meng_b_tos> _parser = new pb::MessageParser<skill_jing_meng_b_tos>(() => new skill_jing_meng_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jing_meng_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_b_tos(skill_jing_meng_b_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_b_tos Clone() {
    return new skill_jing_meng_b_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jing_meng_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jing_meng_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jing_meng_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【惊梦】B，弃牌走弃牌协议
/// </summary>
public sealed partial class skill_jing_meng_b_toc : pb::IMessage<skill_jing_meng_b_toc> {
  private static readonly pb::MessageParser<skill_jing_meng_b_toc> _parser = new pb::MessageParser<skill_jing_meng_b_toc>(() => new skill_jing_meng_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jing_meng_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_b_toc(skill_jing_meng_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jing_meng_b_toc Clone() {
    return new skill_jing_meng_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 用于客户端战报显示，弃牌走弃牌协议
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jing_meng_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jing_meng_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jing_meng_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 商玉【借刀杀人】A：争夺阶段，你可以翻开此角色牌，然后抽取另一名角色的一张手牌并展示之。若展示的牌是非黑色，则你摸一张牌。
/// </summary>
public sealed partial class skill_jie_dao_sha_ren_a_tos : pb::IMessage<skill_jie_dao_sha_ren_a_tos> {
  private static readonly pb::MessageParser<skill_jie_dao_sha_ren_a_tos> _parser = new pb::MessageParser<skill_jie_dao_sha_ren_a_tos>(() => new skill_jie_dao_sha_ren_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jie_dao_sha_ren_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_a_tos(skill_jie_dao_sha_ren_a_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_a_tos Clone() {
    return new skill_jie_dao_sha_ren_a_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jie_dao_sha_ren_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jie_dao_sha_ren_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jie_dao_sha_ren_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【借刀杀人】A
/// </summary>
public sealed partial class skill_jie_dao_sha_ren_a_toc : pb::IMessage<skill_jie_dao_sha_ren_a_toc> {
  private static readonly pb::MessageParser<skill_jie_dao_sha_ren_a_toc> _parser = new pb::MessageParser<skill_jie_dao_sha_ren_a_toc>(() => new skill_jie_dao_sha_ren_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jie_dao_sha_ren_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_a_toc(skill_jie_dao_sha_ren_a_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_a_toc Clone() {
    return new skill_jie_dao_sha_ren_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 那张抽取的牌，所有人都能看到
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 4;
  private uint waitingSecond_;
  /// <summary>
  /// 如果是黑色，则这个也会大于0。如果是非黑色，则这个也会等于0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jie_dao_sha_ren_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jie_dao_sha_ren_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jie_dao_sha_ren_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 32: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 商玉【借刀杀人】B：若展示的牌是黑色，则你可以将其置入一名角色的情报区，并将你的角色牌翻至面朝下。
/// </summary>
public sealed partial class skill_jie_dao_sha_ren_b_tos : pb::IMessage<skill_jie_dao_sha_ren_b_tos> {
  private static readonly pb::MessageParser<skill_jie_dao_sha_ren_b_tos> _parser = new pb::MessageParser<skill_jie_dao_sha_ren_b_tos>(() => new skill_jie_dao_sha_ren_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jie_dao_sha_ren_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_b_tos(skill_jie_dao_sha_ren_b_tos other) : this() {
    enable_ = other.enable_;
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_b_tos Clone() {
    return new skill_jie_dao_sha_ren_b_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jie_dao_sha_ren_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jie_dao_sha_ren_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jie_dao_sha_ren_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【借刀杀人】B
/// </summary>
public sealed partial class skill_jie_dao_sha_ren_b_toc : pb::IMessage<skill_jie_dao_sha_ren_b_toc> {
  private static readonly pb::MessageParser<skill_jie_dao_sha_ren_b_toc> _parser = new pb::MessageParser<skill_jie_dao_sha_ren_b_toc>(() => new skill_jie_dao_sha_ren_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jie_dao_sha_ren_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_b_toc(skill_jie_dao_sha_ren_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jie_dao_sha_ren_b_toc Clone() {
    return new skill_jie_dao_sha_ren_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 那张贴的牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jie_dao_sha_ren_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jie_dao_sha_ren_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jie_dao_sha_ren_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 裴玲【交际】A：出牌阶段限一次，你可以抽取一名角色的最多两张手牌。
/// </summary>
public sealed partial class skill_jiao_ji_a_tos : pb::IMessage<skill_jiao_ji_a_tos> {
  private static readonly pb::MessageParser<skill_jiao_ji_a_tos> _parser = new pb::MessageParser<skill_jiao_ji_a_tos>(() => new skill_jiao_ji_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiao_ji_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_a_tos(skill_jiao_ji_a_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_a_tos Clone() {
    return new skill_jiao_ji_a_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiao_ji_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiao_ji_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiao_ji_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【交际】A
/// </summary>
public sealed partial class skill_jiao_ji_a_toc : pb::IMessage<skill_jiao_ji_a_toc> {
  private static readonly pb::MessageParser<skill_jiao_ji_a_toc> _parser = new pb::MessageParser<skill_jiao_ji_a_toc>(() => new skill_jiao_ji_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiao_ji_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_a_toc(skill_jiao_ji_a_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    unknownCardCount_ = other.unknownCardCount_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_a_toc Clone() {
    return new skill_jiao_ji_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 抽到的牌，只有使用者和目标角色能看到这个
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 4;
  private uint unknownCardCount_;
  /// <summary>
  /// 其他人看不到抽到的牌，只有数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 5;
  private uint waitingSecond_;
  /// <summary>
  /// 如果不需要还，waiting_second就为0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 6;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiao_ji_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiao_ji_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (UnknownCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(UnknownCardCount);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiao_ji_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 32: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
        case 40: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 48: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 裴玲【交际】B：然后将等量手牌交给该角色。你每收集一张黑色情报，便可以少交一张牌。
/// </summary>
public sealed partial class skill_jiao_ji_b_tos : pb::IMessage<skill_jiao_ji_b_tos> {
  private static readonly pb::MessageParser<skill_jiao_ji_b_tos> _parser = new pb::MessageParser<skill_jiao_ji_b_tos>(() => new skill_jiao_ji_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiao_ji_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_b_tos(skill_jiao_ji_b_tos other) : this() {
    cardIds_ = other.cardIds_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_b_tos Clone() {
    return new skill_jiao_ji_b_tos(this);
  }

  /// <summary>Field number for the "card_ids" field.</summary>
  public const int CardIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_cardIds_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> cardIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardIds {
    get { return cardIds_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiao_ji_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiao_ji_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cardIds_.Equals(other.cardIds_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cardIds_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cardIds_.WriteTo(output, _repeated_cardIds_codec);
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cardIds_.CalculateSize(_repeated_cardIds_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiao_ji_b_tos other) {
    if (other == null) {
      return;
    }
    cardIds_.Add(other.cardIds_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【交际】B
/// </summary>
public sealed partial class skill_jiao_ji_b_toc : pb::IMessage<skill_jiao_ji_b_toc> {
  private static readonly pb::MessageParser<skill_jiao_ji_b_toc> _parser = new pb::MessageParser<skill_jiao_ji_b_toc>(() => new skill_jiao_ji_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiao_ji_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_b_toc(skill_jiao_ji_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    unknownCardCount_ = other.unknownCardCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiao_ji_b_toc Clone() {
    return new skill_jiao_ji_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 抽到的牌，只有使用者和目标角色能看到这个
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 4;
  private uint unknownCardCount_;
  /// <summary>
  /// 其他人看不到抽到的牌，只有数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiao_ji_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiao_ji_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (UnknownCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(UnknownCardCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiao_ji_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 32: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 连鸢【妙笔巧辩】A：争夺阶段，你可以翻开此角色牌，然后从所有角色的情报区选择合计至多两张不含有相同颜色的情报，将其加入你的手牌。
/// </summary>
public sealed partial class skill_miao_bi_qiao_bian_a_tos : pb::IMessage<skill_miao_bi_qiao_bian_a_tos> {
  private static readonly pb::MessageParser<skill_miao_bi_qiao_bian_a_tos> _parser = new pb::MessageParser<skill_miao_bi_qiao_bian_a_tos>(() => new skill_miao_bi_qiao_bian_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_miao_bi_qiao_bian_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_a_tos(skill_miao_bi_qiao_bian_a_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_a_tos Clone() {
    return new skill_miao_bi_qiao_bian_a_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_miao_bi_qiao_bian_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_miao_bi_qiao_bian_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_miao_bi_qiao_bian_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【妙笔巧辩】A，广播选择第一张牌，并等待选择第二张牌
/// </summary>
public sealed partial class skill_miao_bi_qiao_bian_a_toc : pb::IMessage<skill_miao_bi_qiao_bian_a_toc> {
  private static readonly pb::MessageParser<skill_miao_bi_qiao_bian_a_toc> _parser = new pb::MessageParser<skill_miao_bi_qiao_bian_a_toc>(() => new skill_miao_bi_qiao_bian_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_miao_bi_qiao_bian_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_a_toc(skill_miao_bi_qiao_bian_a_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_a_toc Clone() {
    return new skill_miao_bi_qiao_bian_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 4;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_miao_bi_qiao_bian_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_miao_bi_qiao_bian_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_miao_bi_qiao_bian_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
        case 32: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 连鸢【妙笔巧辩】B，选择第二张牌
/// </summary>
public sealed partial class skill_miao_bi_qiao_bian_b_tos : pb::IMessage<skill_miao_bi_qiao_bian_b_tos> {
  private static readonly pb::MessageParser<skill_miao_bi_qiao_bian_b_tos> _parser = new pb::MessageParser<skill_miao_bi_qiao_bian_b_tos>(() => new skill_miao_bi_qiao_bian_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_miao_bi_qiao_bian_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_b_tos(skill_miao_bi_qiao_bian_b_tos other) : this() {
    enable_ = other.enable_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_b_tos Clone() {
    return new skill_miao_bi_qiao_bian_b_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  /// <summary>
  /// 不选第二张牌的话，enable填false
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_miao_bi_qiao_bian_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_miao_bi_qiao_bian_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_miao_bi_qiao_bian_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【妙笔巧辩】B，广播选择第二张牌
/// </summary>
public sealed partial class skill_miao_bi_qiao_bian_b_toc : pb::IMessage<skill_miao_bi_qiao_bian_b_toc> {
  private static readonly pb::MessageParser<skill_miao_bi_qiao_bian_b_toc> _parser = new pb::MessageParser<skill_miao_bi_qiao_bian_b_toc>(() => new skill_miao_bi_qiao_bian_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_miao_bi_qiao_bian_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_b_toc(skill_miao_bi_qiao_bian_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_bi_qiao_bian_b_toc Clone() {
    return new skill_miao_bi_qiao_bian_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_miao_bi_qiao_bian_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_miao_bi_qiao_bian_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_miao_bi_qiao_bian_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 王田香【禁闭】A：出牌阶段限一次，你可以指定一名角色。
/// </summary>
public sealed partial class skill_jin_bi_a_tos : pb::IMessage<skill_jin_bi_a_tos> {
  private static readonly pb::MessageParser<skill_jin_bi_a_tos> _parser = new pb::MessageParser<skill_jin_bi_a_tos>(() => new skill_jin_bi_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_bi_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_a_tos(skill_jin_bi_a_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_a_tos Clone() {
    return new skill_jin_bi_a_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_bi_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_bi_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_bi_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【禁闭】A，如果他不够两张手牌，会直接不发这条协议，直接发【禁闭】B协议
/// </summary>
public sealed partial class skill_jin_bi_a_toc : pb::IMessage<skill_jin_bi_a_toc> {
  private static readonly pb::MessageParser<skill_jin_bi_a_toc> _parser = new pb::MessageParser<skill_jin_bi_a_toc>(() => new skill_jin_bi_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_bi_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_a_toc(skill_jin_bi_a_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_a_toc Clone() {
    return new skill_jin_bi_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 王田香的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 被禁闭的人的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 3;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_bi_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_bi_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_bi_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 王田香【禁闭】B：除非其交给你两张手牌，否则其本回合不能使用手牌，且所有角色技能无效。
/// </summary>
public sealed partial class skill_jin_bi_b_tos : pb::IMessage<skill_jin_bi_b_tos> {
  private static readonly pb::MessageParser<skill_jin_bi_b_tos> _parser = new pb::MessageParser<skill_jin_bi_b_tos>(() => new skill_jin_bi_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_bi_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_b_tos(skill_jin_bi_b_tos other) : this() {
    cardIds_ = other.cardIds_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_b_tos Clone() {
    return new skill_jin_bi_b_tos(this);
  }

  /// <summary>Field number for the "card_ids" field.</summary>
  public const int CardIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_cardIds_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> cardIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardIds {
    get { return cardIds_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_bi_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_bi_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cardIds_.Equals(other.cardIds_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cardIds_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cardIds_.WriteTo(output, _repeated_cardIds_codec);
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cardIds_.CalculateSize(_repeated_cardIds_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_bi_b_tos other) {
    if (other == null) {
      return;
    }
    cardIds_.Add(other.cardIds_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【禁闭】B
/// </summary>
public sealed partial class skill_jin_bi_b_toc : pb::IMessage<skill_jin_bi_b_toc> {
  private static readonly pb::MessageParser<skill_jin_bi_b_toc> _parser = new pb::MessageParser<skill_jin_bi_b_toc>(() => new skill_jin_bi_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_bi_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_b_toc(skill_jin_bi_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    unknownCardCount_ = other.unknownCardCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_bi_b_toc Clone() {
    return new skill_jin_bi_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 王田香的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 被禁闭的人的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 交出的牌，只有王田香和被禁闭的人能看到
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 4;
  private uint unknownCardCount_;
  /// <summary>
  /// 其他人看不到交出的牌，只有数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_bi_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_bi_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (UnknownCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(UnknownCardCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_bi_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 32: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 阿芙罗拉【妙手】A：争夺阶段，你可以翻开此角色牌，然后弃置待接收情报，并查看一名角色的手牌和情报区。
/// </summary>
public sealed partial class skill_miao_shou_a_tos : pb::IMessage<skill_miao_shou_a_tos> {
  private static readonly pb::MessageParser<skill_miao_shou_a_tos> _parser = new pb::MessageParser<skill_miao_shou_a_tos>(() => new skill_miao_shou_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_miao_shou_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_a_tos(skill_miao_shou_a_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_a_tos Clone() {
    return new skill_miao_shou_a_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_miao_shou_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_miao_shou_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_miao_shou_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【妙手】A
/// </summary>
public sealed partial class skill_miao_shou_a_toc : pb::IMessage<skill_miao_shou_a_toc> {
  private static readonly pb::MessageParser<skill_miao_shou_a_toc> _parser = new pb::MessageParser<skill_miao_shou_a_toc>(() => new skill_miao_shou_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_miao_shou_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_a_toc(skill_miao_shou_a_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_a_toc Clone() {
    return new skill_miao_shou_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 他的手牌，只有阿芙罗拉能看见
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 4;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 6;
  private global::card messageCard_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_miao_shou_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_miao_shou_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (WaitingSecond != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (messageCard_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(MessageCard);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_miao_shou_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 32: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
        case 50: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 阿芙罗拉【妙手】B：从中选择一张牌作为待收情报，面朝上移至一名角色的面前。
/// </summary>
public sealed partial class skill_miao_shou_b_tos : pb::IMessage<skill_miao_shou_b_tos> {
  private static readonly pb::MessageParser<skill_miao_shou_b_tos> _parser = new pb::MessageParser<skill_miao_shou_b_tos>(() => new skill_miao_shou_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_miao_shou_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_b_tos(skill_miao_shou_b_tos other) : this() {
    cardId_ = other.cardId_;
    messageCardId_ = other.messageCardId_;
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_b_tos Clone() {
    return new skill_miao_shou_b_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 手牌ID，和下面的情报ID二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "message_card_id" field.</summary>
  public const int MessageCardIdFieldNumber = 2;
  private uint messageCardId_;
  /// <summary>
  /// 情报ID，和上面的手牌ID二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MessageCardId {
    get { return messageCardId_; }
    set {
      messageCardId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  /// <summary>
  /// 移至谁的面前
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_miao_shou_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_miao_shou_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (MessageCardId != other.MessageCardId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (MessageCardId != 0) hash ^= MessageCardId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (MessageCardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(MessageCardId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (MessageCardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageCardId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_miao_shou_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.MessageCardId != 0) {
      MessageCardId = other.MessageCardId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          MessageCardId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【妙手】B
/// </summary>
public sealed partial class skill_miao_shou_b_toc : pb::IMessage<skill_miao_shou_b_toc> {
  private static readonly pb::MessageParser<skill_miao_shou_b_toc> _parser = new pb::MessageParser<skill_miao_shou_b_toc>(() => new skill_miao_shou_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_miao_shou_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_b_toc(skill_miao_shou_b_toc other) : this() {
    playerId_ = other.playerId_;
    fromPlayerId_ = other.fromPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    messageCardId_ = other.messageCardId_;
    targetPlayerId_ = other.targetPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_miao_shou_b_toc Clone() {
    return new skill_miao_shou_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 阿芙罗拉的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "from_player_id" field.</summary>
  public const int FromPlayerIdFieldNumber = 2;
  private uint fromPlayerId_;
  /// <summary>
  /// 那张牌本来是谁的
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FromPlayerId {
    get { return fromPlayerId_; }
    set {
      fromPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 选的那张手牌，和下面的情报ID二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "message_card_id" field.</summary>
  public const int MessageCardIdFieldNumber = 4;
  private uint messageCardId_;
  /// <summary>
  /// 选的那张情报ID，和上面的手牌二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MessageCardId {
    get { return messageCardId_; }
    set {
      messageCardId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 5;
  private uint targetPlayerId_;
  /// <summary>
  /// 移至谁的面前
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_miao_shou_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_miao_shou_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (FromPlayerId != other.FromPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (MessageCardId != other.MessageCardId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (FromPlayerId != 0) hash ^= FromPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (MessageCardId != 0) hash ^= MessageCardId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (FromPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(FromPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (MessageCardId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(MessageCardId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(TargetPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (FromPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (MessageCardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageCardId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_miao_shou_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.FromPlayerId != 0) {
      FromPlayerId = other.FromPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.MessageCardId != 0) {
      MessageCardId = other.MessageCardId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          FromPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 32: {
          MessageCardId = input.ReadUInt32();
          break;
        }
        case 40: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 玄青子【金口一开】A：你的回合的争夺阶段限一次，你可以查看牌堆顶的一张牌。
/// </summary>
public sealed partial class skill_jin_kou_yi_kai_a_tos : pb::IMessage<skill_jin_kou_yi_kai_a_tos> {
  private static readonly pb::MessageParser<skill_jin_kou_yi_kai_a_tos> _parser = new pb::MessageParser<skill_jin_kou_yi_kai_a_tos>(() => new skill_jin_kou_yi_kai_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_kou_yi_kai_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_a_tos(skill_jin_kou_yi_kai_a_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_a_tos Clone() {
    return new skill_jin_kou_yi_kai_a_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_kou_yi_kai_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_kou_yi_kai_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_kou_yi_kai_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【金口一开】A
/// </summary>
public sealed partial class skill_jin_kou_yi_kai_a_toc : pb::IMessage<skill_jin_kou_yi_kai_a_toc> {
  private static readonly pb::MessageParser<skill_jin_kou_yi_kai_a_toc> _parser = new pb::MessageParser<skill_jin_kou_yi_kai_a_toc>(() => new skill_jin_kou_yi_kai_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_kou_yi_kai_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_a_toc(skill_jin_kou_yi_kai_a_toc other) : this() {
    playerId_ = other.playerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_a_toc Clone() {
    return new skill_jin_kou_yi_kai_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 2;
  private global::card card_;
  /// <summary>
  /// 那张牌，只有玄青子能看见
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 3;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_kou_yi_kai_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_kou_yi_kai_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Card);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_kou_yi_kai_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 24: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 玄青子【金口一开】B：然后选择一项：
/// ♦ 你摸一张牌。
/// ♦ 将牌堆顶的一张牌和待接收情报面朝下互换
/// </summary>
public sealed partial class skill_jin_kou_yi_kai_b_tos : pb::IMessage<skill_jin_kou_yi_kai_b_tos> {
  private static readonly pb::MessageParser<skill_jin_kou_yi_kai_b_tos> _parser = new pb::MessageParser<skill_jin_kou_yi_kai_b_tos>(() => new skill_jin_kou_yi_kai_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_kou_yi_kai_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_b_tos(skill_jin_kou_yi_kai_b_tos other) : this() {
    exchange_ = other.exchange_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_b_tos Clone() {
    return new skill_jin_kou_yi_kai_b_tos(this);
  }

  /// <summary>Field number for the "exchange" field.</summary>
  public const int ExchangeFieldNumber = 1;
  private bool exchange_;
  /// <summary>
  /// false-摸一张牌，true-互换
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Exchange {
    get { return exchange_; }
    set {
      exchange_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_kou_yi_kai_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_kou_yi_kai_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Exchange != other.Exchange) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Exchange != false) hash ^= Exchange.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Exchange != false) {
      output.WriteRawTag(8);
      output.WriteBool(Exchange);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Exchange != false) {
      size += 1 + 1;
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_kou_yi_kai_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.Exchange != false) {
      Exchange = other.Exchange;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Exchange = input.ReadBool();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【金口一开】B
/// </summary>
public sealed partial class skill_jin_kou_yi_kai_b_toc : pb::IMessage<skill_jin_kou_yi_kai_b_toc> {
  private static readonly pb::MessageParser<skill_jin_kou_yi_kai_b_toc> _parser = new pb::MessageParser<skill_jin_kou_yi_kai_b_toc>(() => new skill_jin_kou_yi_kai_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_kou_yi_kai_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_b_toc(skill_jin_kou_yi_kai_b_toc other) : this() {
    playerId_ = other.playerId_;
    exchange_ = other.exchange_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_kou_yi_kai_b_toc Clone() {
    return new skill_jin_kou_yi_kai_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "exchange" field.</summary>
  public const int ExchangeFieldNumber = 2;
  private bool exchange_;
  /// <summary>
  /// false-摸一张牌，true-互换。摸牌走摸牌协议，互换由客户端自行处理。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Exchange {
    get { return exchange_; }
    set {
      exchange_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_kou_yi_kai_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_kou_yi_kai_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Exchange != other.Exchange) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Exchange != false) hash ^= Exchange.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (Exchange != false) {
      output.WriteRawTag(16);
      output.WriteBool(Exchange);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Exchange != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_kou_yi_kai_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Exchange != false) {
      Exchange = other.Exchange;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Exchange = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【江湖令】A
/// </summary>
public sealed partial class skill_wait_for_jiang_hu_ling_a_toc : pb::IMessage<skill_wait_for_jiang_hu_ling_a_toc> {
  private static readonly pb::MessageParser<skill_wait_for_jiang_hu_ling_a_toc> _parser = new pb::MessageParser<skill_wait_for_jiang_hu_ling_a_toc>(() => new skill_wait_for_jiang_hu_ling_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_jiang_hu_ling_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_jiang_hu_ling_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_jiang_hu_ling_a_toc(skill_wait_for_jiang_hu_ling_a_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_jiang_hu_ling_a_toc Clone() {
    return new skill_wait_for_jiang_hu_ling_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_jiang_hu_ling_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_jiang_hu_ling_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_jiang_hu_ling_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 王富贵【江湖令】A：你传出情报后，可以宣言一个颜色。
/// </summary>
public sealed partial class skill_jiang_hu_ling_a_tos : pb::IMessage<skill_jiang_hu_ling_a_tos> {
  private static readonly pb::MessageParser<skill_jiang_hu_ling_a_tos> _parser = new pb::MessageParser<skill_jiang_hu_ling_a_tos>(() => new skill_jiang_hu_ling_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiang_hu_ling_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_a_tos(skill_jiang_hu_ling_a_tos other) : this() {
    enable_ = other.enable_;
    color_ = other.color_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_a_tos Clone() {
    return new skill_jiang_hu_ling_a_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 2;
  private global::color color_ = global::color.Black;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::color Color {
    get { return color_; }
    set {
      color_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiang_hu_ling_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiang_hu_ling_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (Color != other.Color) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (Color != global::color.Black) hash ^= Color.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (Color != global::color.Black) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Color);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (Color != global::color.Black) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiang_hu_ling_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.Color != global::color.Black) {
      Color = other.Color;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          Color = (global::color) input.ReadEnum();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【江湖令】A
/// </summary>
public sealed partial class skill_jiang_hu_ling_a_toc : pb::IMessage<skill_jiang_hu_ling_a_toc> {
  private static readonly pb::MessageParser<skill_jiang_hu_ling_a_toc> _parser = new pb::MessageParser<skill_jiang_hu_ling_a_toc>(() => new skill_jiang_hu_ling_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiang_hu_ling_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_a_toc(skill_jiang_hu_ling_a_toc other) : this() {
    playerId_ = other.playerId_;
    color_ = other.color_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_a_toc Clone() {
    return new skill_jiang_hu_ling_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 2;
  private global::color color_ = global::color.Black;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::color Color {
    get { return color_; }
    set {
      color_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiang_hu_ling_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiang_hu_ling_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Color != other.Color) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Color != global::color.Black) hash ^= Color.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (Color != global::color.Black) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Color);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Color != global::color.Black) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiang_hu_ling_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Color != global::color.Black) {
      Color = other.Color;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Color = (global::color) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【江湖令】B
/// </summary>
public sealed partial class skill_wait_for_jiang_hu_ling_b_toc : pb::IMessage<skill_wait_for_jiang_hu_ling_b_toc> {
  private static readonly pb::MessageParser<skill_wait_for_jiang_hu_ling_b_toc> _parser = new pb::MessageParser<skill_wait_for_jiang_hu_ling_b_toc>(() => new skill_wait_for_jiang_hu_ling_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_jiang_hu_ling_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_jiang_hu_ling_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_jiang_hu_ling_b_toc(skill_wait_for_jiang_hu_ling_b_toc other) : this() {
    playerId_ = other.playerId_;
    color_ = other.color_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_jiang_hu_ling_b_toc Clone() {
    return new skill_wait_for_jiang_hu_ling_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 2;
  private global::color color_ = global::color.Black;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::color Color {
    get { return color_; }
    set {
      color_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 3;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_jiang_hu_ling_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_jiang_hu_ling_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Color != other.Color) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Color != global::color.Black) hash ^= Color.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (Color != global::color.Black) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Color);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Color != global::color.Black) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_jiang_hu_ling_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Color != global::color.Black) {
      Color = other.Color;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Color = (global::color) input.ReadEnum();
          break;
        }
        case 24: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 王富贵【江湖令】B：本回合中，当情报被接收后，你可以从接收者的情报区弃置一张被宣言颜色的情报，若弃置的是黑色情报，则你摸一张牌。
/// 如果不发动，则直接发 end_receive_phase_toc 即可
/// </summary>
public sealed partial class skill_jiang_hu_ling_b_tos : pb::IMessage<skill_jiang_hu_ling_b_tos> {
  private static readonly pb::MessageParser<skill_jiang_hu_ling_b_tos> _parser = new pb::MessageParser<skill_jiang_hu_ling_b_tos>(() => new skill_jiang_hu_ling_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiang_hu_ling_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_b_tos(skill_jiang_hu_ling_b_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_b_tos Clone() {
    return new skill_jiang_hu_ling_b_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiang_hu_ling_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiang_hu_ling_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiang_hu_ling_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【江湖令】B，摸牌走摸牌协议
/// </summary>
public sealed partial class skill_jiang_hu_ling_b_toc : pb::IMessage<skill_jiang_hu_ling_b_toc> {
  private static readonly pb::MessageParser<skill_jiang_hu_ling_b_toc> _parser = new pb::MessageParser<skill_jiang_hu_ling_b_toc>(() => new skill_jiang_hu_ling_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiang_hu_ling_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_b_toc(skill_jiang_hu_ling_b_toc other) : this() {
    playerId_ = other.playerId_;
    cardId_ = other.cardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiang_hu_ling_b_toc Clone() {
    return new skill_jiang_hu_ling_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiang_hu_ling_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiang_hu_ling_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (CardId != other.CardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiang_hu_ling_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// SP顾小梦【羁绊】A：出牌阶段限一次，可以摸两张牌。
/// </summary>
public sealed partial class skill_ji_ban_a_tos : pb::IMessage<skill_ji_ban_a_tos> {
  private static readonly pb::MessageParser<skill_ji_ban_a_tos> _parser = new pb::MessageParser<skill_ji_ban_a_tos>(() => new skill_ji_ban_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_ban_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[76]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_a_tos(skill_ji_ban_a_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_a_tos Clone() {
    return new skill_ji_ban_a_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_ban_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_ban_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_ban_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【羁绊】A，摸牌走摸牌协议，并等待给牌（摸牌协议会在这个协议之前发）
/// </summary>
public sealed partial class skill_ji_ban_a_toc : pb::IMessage<skill_ji_ban_a_toc> {
  private static readonly pb::MessageParser<skill_ji_ban_a_toc> _parser = new pb::MessageParser<skill_ji_ban_a_toc>(() => new skill_ji_ban_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_ban_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[77]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_a_toc(skill_ji_ban_a_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_a_toc Clone() {
    return new skill_ji_ban_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_ban_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_ban_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_ban_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// SP顾小梦【羁绊】B：然后将至少一张手牌交给另一名角色。
/// </summary>
public sealed partial class skill_ji_ban_b_tos : pb::IMessage<skill_ji_ban_b_tos> {
  private static readonly pb::MessageParser<skill_ji_ban_b_tos> _parser = new pb::MessageParser<skill_ji_ban_b_tos>(() => new skill_ji_ban_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_ban_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[78]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_b_tos(skill_ji_ban_b_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardIds_ = other.cardIds_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_b_tos Clone() {
    return new skill_ji_ban_b_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_ids" field.</summary>
  public const int CardIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_cardIds_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> cardIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardIds {
    get { return cardIds_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_ban_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_ban_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cardIds_.Equals(other.cardIds_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cardIds_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    cardIds_.WriteTo(output, _repeated_cardIds_codec);
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cardIds_.CalculateSize(_repeated_cardIds_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_ban_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cardIds_.Add(other.cardIds_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 18:
        case 16: {
          cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【羁绊】B
/// </summary>
public sealed partial class skill_ji_ban_b_toc : pb::IMessage<skill_ji_ban_b_toc> {
  private static readonly pb::MessageParser<skill_ji_ban_b_toc> _parser = new pb::MessageParser<skill_ji_ban_b_toc>(() => new skill_ji_ban_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_ban_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[79]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_b_toc(skill_ji_ban_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    unknownCardCount_ = other.unknownCardCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_ban_b_toc Clone() {
    return new skill_ji_ban_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 给的牌，只有顾小梦和给的那个人能看到
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 4;
  private uint unknownCardCount_;
  /// <summary>
  /// 其他人看不到给的牌，只有数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_ban_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_ban_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (UnknownCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(UnknownCardCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_ban_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 32: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【诱导】：你使用【误导】后，摸一张牌。
/// </summary>
public sealed partial class skill_you_dao_toc : pb::IMessage<skill_you_dao_toc> {
  private static readonly pb::MessageParser<skill_you_dao_toc> _parser = new pb::MessageParser<skill_you_dao_toc>(() => new skill_you_dao_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_you_dao_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[80]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_you_dao_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_you_dao_toc(skill_you_dao_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_you_dao_toc Clone() {
    return new skill_you_dao_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_you_dao_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_you_dao_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_you_dao_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 白沧浪【博爱】A：出牌阶段限一次，你可以摸一张牌。
/// </summary>
public sealed partial class skill_bo_ai_a_tos : pb::IMessage<skill_bo_ai_a_tos> {
  private static readonly pb::MessageParser<skill_bo_ai_a_tos> _parser = new pb::MessageParser<skill_bo_ai_a_tos>(() => new skill_bo_ai_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_bo_ai_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[81]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_a_tos(skill_bo_ai_a_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_a_tos Clone() {
    return new skill_bo_ai_a_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_bo_ai_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_bo_ai_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_bo_ai_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【博爱】A，摸牌走摸牌协议，并等待给牌（摸牌协议会在这个协议之前发）
/// </summary>
public sealed partial class skill_bo_ai_a_toc : pb::IMessage<skill_bo_ai_a_toc> {
  private static readonly pb::MessageParser<skill_bo_ai_a_toc> _parser = new pb::MessageParser<skill_bo_ai_a_toc>(() => new skill_bo_ai_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_bo_ai_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[82]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_a_toc(skill_bo_ai_a_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_a_toc Clone() {
    return new skill_bo_ai_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_bo_ai_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_bo_ai_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_bo_ai_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 白沧浪【博爱】B：然后可以将一张手牌交给另一名角色，若交给了女性角色，则你再摸一张牌。
/// </summary>
public sealed partial class skill_bo_ai_b_tos : pb::IMessage<skill_bo_ai_b_tos> {
  private static readonly pb::MessageParser<skill_bo_ai_b_tos> _parser = new pb::MessageParser<skill_bo_ai_b_tos>(() => new skill_bo_ai_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_bo_ai_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[83]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_b_tos(skill_bo_ai_b_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_b_tos Clone() {
    return new skill_bo_ai_b_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  /// <summary>
  /// 0表示不给
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_bo_ai_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_bo_ai_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_bo_ai_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【博爱】B，摸牌走摸牌协议
/// </summary>
public sealed partial class skill_bo_ai_b_toc : pb::IMessage<skill_bo_ai_b_toc> {
  private static readonly pb::MessageParser<skill_bo_ai_b_toc> _parser = new pb::MessageParser<skill_bo_ai_b_toc>(() => new skill_bo_ai_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_bo_ai_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[84]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_b_toc(skill_bo_ai_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_bo_ai_b_toc Clone() {
    return new skill_bo_ai_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 给的牌，只有白沧浪和给的那个人能看到
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_bo_ai_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_bo_ai_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_bo_ai_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 小九【广发报】A：争夺阶段，你可以翻开此角色牌，然后摸三张牌。
/// </summary>
public sealed partial class skill_guang_fa_bao_a_tos : pb::IMessage<skill_guang_fa_bao_a_tos> {
  private static readonly pb::MessageParser<skill_guang_fa_bao_a_tos> _parser = new pb::MessageParser<skill_guang_fa_bao_a_tos>(() => new skill_guang_fa_bao_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_guang_fa_bao_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[85]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_a_tos(skill_guang_fa_bao_a_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_a_tos Clone() {
    return new skill_guang_fa_bao_a_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_guang_fa_bao_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_guang_fa_bao_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_guang_fa_bao_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【广发报】A
/// </summary>
public sealed partial class skill_guang_fa_bao_a_toc : pb::IMessage<skill_guang_fa_bao_a_toc> {
  private static readonly pb::MessageParser<skill_guang_fa_bao_a_toc> _parser = new pb::MessageParser<skill_guang_fa_bao_a_toc>(() => new skill_guang_fa_bao_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_guang_fa_bao_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[86]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_a_toc(skill_guang_fa_bao_a_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_a_toc Clone() {
    return new skill_guang_fa_bao_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_guang_fa_bao_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_guang_fa_bao_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_guang_fa_bao_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【广发报】B
/// </summary>
public sealed partial class skill_wait_for_guang_fa_bao_b_toc : pb::IMessage<skill_wait_for_guang_fa_bao_b_toc> {
  private static readonly pb::MessageParser<skill_wait_for_guang_fa_bao_b_toc> _parser = new pb::MessageParser<skill_wait_for_guang_fa_bao_b_toc>(() => new skill_wait_for_guang_fa_bao_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_guang_fa_bao_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[87]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_guang_fa_bao_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_guang_fa_bao_b_toc(skill_wait_for_guang_fa_bao_b_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_guang_fa_bao_b_toc Clone() {
    return new skill_wait_for_guang_fa_bao_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_guang_fa_bao_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_guang_fa_bao_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_guang_fa_bao_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 小九【广发报】B：并且你可以将你的任意张手牌置入任意名角色的情报区。你不能通过此技能让任何角色收集三张或更多的同色情报。
/// </summary>
public sealed partial class skill_guang_fa_bao_b_tos : pb::IMessage<skill_guang_fa_bao_b_tos> {
  private static readonly pb::MessageParser<skill_guang_fa_bao_b_tos> _parser = new pb::MessageParser<skill_guang_fa_bao_b_tos>(() => new skill_guang_fa_bao_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_guang_fa_bao_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[88]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_b_tos(skill_guang_fa_bao_b_tos other) : this() {
    enable_ = other.enable_;
    targetPlayerId_ = other.targetPlayerId_;
    cardIds_ = other.cardIds_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_b_tos Clone() {
    return new skill_guang_fa_bao_b_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  /// <summary>
  /// true-发，还能继续，false-不发，就不继续了
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_ids" field.</summary>
  public const int CardIdsFieldNumber = 3;
  private static readonly pb::FieldCodec<uint> _repeated_cardIds_codec
      = pb::FieldCodec.ForUInt32(26);
  private readonly pbc::RepeatedField<uint> cardIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardIds {
    get { return cardIds_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_guang_fa_bao_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_guang_fa_bao_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cardIds_.Equals(other.cardIds_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cardIds_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    cardIds_.WriteTo(output, _repeated_cardIds_codec);
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cardIds_.CalculateSize(_repeated_cardIds_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_guang_fa_bao_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cardIds_.Add(other.cardIds_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26:
        case 24: {
          cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【广发报】B
/// </summary>
public sealed partial class skill_guang_fa_bao_b_toc : pb::IMessage<skill_guang_fa_bao_b_toc> {
  private static readonly pb::MessageParser<skill_guang_fa_bao_b_toc> _parser = new pb::MessageParser<skill_guang_fa_bao_b_toc>(() => new skill_guang_fa_bao_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_guang_fa_bao_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[89]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_b_toc(skill_guang_fa_bao_b_toc other) : this() {
    playerId_ = other.playerId_;
    enable_ = other.enable_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_guang_fa_bao_b_toc Clone() {
    return new skill_guang_fa_bao_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 2;
  private bool enable_;
  /// <summary>
  /// true-发，还能继续，false-不发，就不继续了。如果发完没牌了，这里还是true但不继续。如果继续就会接着发上面的wait，不继续就不再发wait了。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(34, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 给的牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_guang_fa_bao_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_guang_fa_bao_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Enable != other.Enable) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (Enable != false) {
      output.WriteRawTag(16);
      output.WriteBool(Enable);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Enable != false) {
      size += 1 + 1;
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_guang_fa_bao_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Enable = input.ReadBool();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 34: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【强令】
/// </summary>
public sealed partial class skill_wait_for_qiang_ling_toc : pb::IMessage<skill_wait_for_qiang_ling_toc> {
  private static readonly pb::MessageParser<skill_wait_for_qiang_ling_toc> _parser = new pb::MessageParser<skill_wait_for_qiang_ling_toc>(() => new skill_wait_for_qiang_ling_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_qiang_ling_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[90]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_qiang_ling_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_qiang_ling_toc(skill_wait_for_qiang_ling_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_qiang_ling_toc Clone() {
    return new skill_wait_for_qiang_ling_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_qiang_ling_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_qiang_ling_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_qiang_ling_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 张一挺【强令】：你传出情报后，或你决定接收情报后，可以宣言至多两个卡牌名称。本回合中，所有角色均不能使用被宣言的卡牌。
/// </summary>
public sealed partial class skill_qiang_ling_tos : pb::IMessage<skill_qiang_ling_tos> {
  private static readonly pb::MessageParser<skill_qiang_ling_tos> _parser = new pb::MessageParser<skill_qiang_ling_tos>(() => new skill_qiang_ling_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_qiang_ling_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[91]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qiang_ling_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qiang_ling_tos(skill_qiang_ling_tos other) : this() {
    enable_ = other.enable_;
    types_ = other.types_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qiang_ling_tos Clone() {
    return new skill_qiang_ling_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "types" field.</summary>
  public const int Types_FieldNumber = 2;
  private static readonly pb::FieldCodec<global::card_type> _repeated_types_codec
      = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::card_type) x);
  private readonly pbc::RepeatedField<global::card_type> types_ = new pbc::RepeatedField<global::card_type>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card_type> Types_ {
    get { return types_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_qiang_ling_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_qiang_ling_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if(!types_.Equals(other.types_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    hash ^= types_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    types_.WriteTo(output, _repeated_types_codec);
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    size += types_.CalculateSize(_repeated_types_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_qiang_ling_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    types_.Add(other.types_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 18:
        case 16: {
          types_.AddEntriesFrom(input, _repeated_types_codec);
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【强令】，不发动就没有这条协议
/// </summary>
public sealed partial class skill_qiang_ling_toc : pb::IMessage<skill_qiang_ling_toc> {
  private static readonly pb::MessageParser<skill_qiang_ling_toc> _parser = new pb::MessageParser<skill_qiang_ling_toc>(() => new skill_qiang_ling_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_qiang_ling_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[92]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qiang_ling_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qiang_ling_toc(skill_qiang_ling_toc other) : this() {
    playerId_ = other.playerId_;
    types_ = other.types_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qiang_ling_toc Clone() {
    return new skill_qiang_ling_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "types" field.</summary>
  public const int Types_FieldNumber = 2;
  private static readonly pb::FieldCodec<global::card_type> _repeated_types_codec
      = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::card_type) x);
  private readonly pbc::RepeatedField<global::card_type> types_ = new pbc::RepeatedField<global::card_type>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card_type> Types_ {
    get { return types_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_qiang_ling_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_qiang_ling_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if(!types_.Equals(other.types_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    hash ^= types_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    types_.WriteTo(output, _repeated_types_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    size += types_.CalculateSize(_repeated_types_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_qiang_ling_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    types_.Add(other.types_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18:
        case 16: {
          types_.AddEntriesFrom(input, _repeated_types_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 吴志国【坚韧】A：你接收黑色情报后，可以展示牌堆顶的一张牌，若是黑色牌，则将展示的牌加入你的手牌。
/// </summary>
public sealed partial class skill_jian_ren_a_tos : pb::IMessage<skill_jian_ren_a_tos> {
  private static readonly pb::MessageParser<skill_jian_ren_a_tos> _parser = new pb::MessageParser<skill_jian_ren_a_tos>(() => new skill_jian_ren_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jian_ren_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[93]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_a_tos(skill_jian_ren_a_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_a_tos Clone() {
    return new skill_jian_ren_a_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jian_ren_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jian_ren_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jian_ren_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【坚韧】A，若是黑色牌则等待使用坚韧B，加入手牌由客户端自己处理。
/// </summary>
public sealed partial class skill_jian_ren_a_toc : pb::IMessage<skill_jian_ren_a_toc> {
  private static readonly pb::MessageParser<skill_jian_ren_a_toc> _parser = new pb::MessageParser<skill_jian_ren_a_toc>(() => new skill_jian_ren_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jian_ren_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[94]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_a_toc(skill_jian_ren_a_toc other) : this() {
    playerId_ = other.playerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_a_toc Clone() {
    return new skill_jian_ren_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 2;
  private global::card card_;
  /// <summary>
  /// 展示的牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 3;
  private uint waitingSecond_;
  /// <summary>
  /// 若是黑色牌，则有等待时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jian_ren_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jian_ren_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Card);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jian_ren_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 24: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 吴志国【坚韧】B：并从一名角色的情报区弃置一张黑色情报。
/// </summary>
public sealed partial class skill_jian_ren_b_tos : pb::IMessage<skill_jian_ren_b_tos> {
  private static readonly pb::MessageParser<skill_jian_ren_b_tos> _parser = new pb::MessageParser<skill_jian_ren_b_tos>(() => new skill_jian_ren_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jian_ren_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[95]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_b_tos(skill_jian_ren_b_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_b_tos Clone() {
    return new skill_jian_ren_b_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  /// <summary>
  /// 目标角色，必须弃，不能不弃
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  /// <summary>
  /// 弃的牌，必须弃，不能不弃
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jian_ren_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jian_ren_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jian_ren_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【坚韧】B
/// </summary>
public sealed partial class skill_jian_ren_b_toc : pb::IMessage<skill_jian_ren_b_toc> {
  private static readonly pb::MessageParser<skill_jian_ren_b_toc> _parser = new pb::MessageParser<skill_jian_ren_b_toc>(() => new skill_jian_ren_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jian_ren_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[96]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_b_toc(skill_jian_ren_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jian_ren_b_toc Clone() {
    return new skill_jian_ren_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 目标角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  /// <summary>
  /// 弃的牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jian_ren_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jian_ren_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jian_ren_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 李醒【搜辑】A：争夺阶段，你可以翻开此角色牌，然后查看一名角色的手牌和待收情报。
/// </summary>
public sealed partial class skill_sou_ji_a_tos : pb::IMessage<skill_sou_ji_a_tos> {
  private static readonly pb::MessageParser<skill_sou_ji_a_tos> _parser = new pb::MessageParser<skill_sou_ji_a_tos>(() => new skill_sou_ji_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_sou_ji_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[97]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_a_tos(skill_sou_ji_a_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_a_tos Clone() {
    return new skill_sou_ji_a_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  /// <summary>
  /// 目标角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_sou_ji_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_sou_ji_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_sou_ji_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【搜辑】A
/// </summary>
public sealed partial class skill_sou_ji_a_toc : pb::IMessage<skill_sou_ji_a_toc> {
  private static readonly pb::MessageParser<skill_sou_ji_a_toc> _parser = new pb::MessageParser<skill_sou_ji_a_toc>(() => new skill_sou_ji_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_sou_ji_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[98]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_a_toc(skill_sou_ji_a_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_a_toc Clone() {
    return new skill_sou_ji_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 目标角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 目标角色的手牌，只有李醒可以看到
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 4;
  private global::card messageCard_;
  /// <summary>
  /// 待收情报，只有李醒可以看到
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 5;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 6;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_sou_ji_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_sou_ji_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (messageCard_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(MessageCard);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_sou_ji_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 34: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
        case 40: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 48: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 李醒【搜辑】B：并且你可以选择其中任意张黑色牌，展示并加入你的手牌。
/// </summary>
public sealed partial class skill_sou_ji_b_tos : pb::IMessage<skill_sou_ji_b_tos> {
  private static readonly pb::MessageParser<skill_sou_ji_b_tos> _parser = new pb::MessageParser<skill_sou_ji_b_tos>(() => new skill_sou_ji_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_sou_ji_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[99]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_b_tos(skill_sou_ji_b_tos other) : this() {
    cardIds_ = other.cardIds_.Clone();
    messageCard_ = other.messageCard_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_b_tos Clone() {
    return new skill_sou_ji_b_tos(this);
  }

  /// <summary>Field number for the "card_ids" field.</summary>
  public const int CardIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_cardIds_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> cardIds_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// 拿的所有手牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardIds {
    get { return cardIds_; }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 2;
  private bool messageCard_;
  /// <summary>
  /// 是否拿情报
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_sou_ji_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_sou_ji_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cardIds_.Equals(other.cardIds_)) return false;
    if (MessageCard != other.MessageCard) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cardIds_.GetHashCode();
    if (MessageCard != false) hash ^= MessageCard.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cardIds_.WriteTo(output, _repeated_cardIds_codec);
    if (MessageCard != false) {
      output.WriteRawTag(16);
      output.WriteBool(MessageCard);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cardIds_.CalculateSize(_repeated_cardIds_codec);
    if (MessageCard != false) {
      size += 1 + 1;
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_sou_ji_b_tos other) {
    if (other == null) {
      return;
    }
    cardIds_.Add(other.cardIds_);
    if (other.MessageCard != false) {
      MessageCard = other.MessageCard;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
          break;
        }
        case 16: {
          MessageCard = input.ReadBool();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【搜辑】B，即使一张都没有拿，也会广播这条协议
/// </summary>
public sealed partial class skill_sou_ji_b_toc : pb::IMessage<skill_sou_ji_b_toc> {
  private static readonly pb::MessageParser<skill_sou_ji_b_toc> _parser = new pb::MessageParser<skill_sou_ji_b_toc>(() => new skill_sou_ji_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_sou_ji_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[100]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_b_toc(skill_sou_ji_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_sou_ji_b_toc Clone() {
    return new skill_sou_ji_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 展示并拿走的手牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 4;
  private global::card messageCard_;
  /// <summary>
  /// 展示并拿走的待收情报，没拿就是null
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_sou_ji_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_sou_ji_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (messageCard_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(MessageCard);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_sou_ji_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 34: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 黄济仁【对症下药】A：争夺阶段，你可以翻开此角色牌，然后摸三张牌。
/// </summary>
public sealed partial class skill_dui_zheng_xia_yao_a_tos : pb::IMessage<skill_dui_zheng_xia_yao_a_tos> {
  private static readonly pb::MessageParser<skill_dui_zheng_xia_yao_a_tos> _parser = new pb::MessageParser<skill_dui_zheng_xia_yao_a_tos>(() => new skill_dui_zheng_xia_yao_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_dui_zheng_xia_yao_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[101]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_a_tos(skill_dui_zheng_xia_yao_a_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_a_tos Clone() {
    return new skill_dui_zheng_xia_yao_a_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_dui_zheng_xia_yao_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_dui_zheng_xia_yao_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_dui_zheng_xia_yao_a_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【对症下药】A
/// </summary>
public sealed partial class skill_dui_zheng_xia_yao_a_toc : pb::IMessage<skill_dui_zheng_xia_yao_a_toc> {
  private static readonly pb::MessageParser<skill_dui_zheng_xia_yao_a_toc> _parser = new pb::MessageParser<skill_dui_zheng_xia_yao_a_toc>(() => new skill_dui_zheng_xia_yao_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_dui_zheng_xia_yao_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[102]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_a_toc(skill_dui_zheng_xia_yao_a_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_a_toc Clone() {
    return new skill_dui_zheng_xia_yao_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_dui_zheng_xia_yao_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_dui_zheng_xia_yao_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_dui_zheng_xia_yao_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 黄济仁【对症下药】B：并且你可以展示两张含有相同颜色的手牌。
/// </summary>
public sealed partial class skill_dui_zheng_xia_yao_b_tos : pb::IMessage<skill_dui_zheng_xia_yao_b_tos> {
  private static readonly pb::MessageParser<skill_dui_zheng_xia_yao_b_tos> _parser = new pb::MessageParser<skill_dui_zheng_xia_yao_b_tos>(() => new skill_dui_zheng_xia_yao_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_dui_zheng_xia_yao_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[103]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_b_tos(skill_dui_zheng_xia_yao_b_tos other) : this() {
    enable_ = other.enable_;
    cardIds_ = other.cardIds_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_b_tos Clone() {
    return new skill_dui_zheng_xia_yao_b_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "card_ids" field.</summary>
  public const int CardIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_cardIds_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> cardIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardIds {
    get { return cardIds_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_dui_zheng_xia_yao_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_dui_zheng_xia_yao_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if(!cardIds_.Equals(other.cardIds_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    hash ^= cardIds_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    cardIds_.WriteTo(output, _repeated_cardIds_codec);
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    size += cardIds_.CalculateSize(_repeated_cardIds_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_dui_zheng_xia_yao_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    cardIds_.Add(other.cardIds_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 18:
        case 16: {
          cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【对症下药】B
/// </summary>
public sealed partial class skill_dui_zheng_xia_yao_b_toc : pb::IMessage<skill_dui_zheng_xia_yao_b_toc> {
  private static readonly pb::MessageParser<skill_dui_zheng_xia_yao_b_toc> _parser = new pb::MessageParser<skill_dui_zheng_xia_yao_b_toc>(() => new skill_dui_zheng_xia_yao_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_dui_zheng_xia_yao_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[104]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_b_toc(skill_dui_zheng_xia_yao_b_toc other) : this() {
    playerId_ = other.playerId_;
    enable_ = other.enable_;
    cards_ = other.cards_.Clone();
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_b_toc Clone() {
    return new skill_dui_zheng_xia_yao_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 2;
  private bool enable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 4;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_dui_zheng_xia_yao_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_dui_zheng_xia_yao_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Enable != other.Enable) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Enable != false) hash ^= Enable.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (Enable != false) {
      output.WriteRawTag(16);
      output.WriteBool(Enable);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (WaitingSecond != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Enable != false) {
      size += 1 + 1;
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_dui_zheng_xia_yao_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    cards_.Add(other.cards_);
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Enable = input.ReadBool();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 32: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 黄济仁【对症下药】C：然后从一名角色的情报区，弃置一张对应颜色情报。
/// </summary>
public sealed partial class skill_dui_zheng_xia_yao_c_tos : pb::IMessage<skill_dui_zheng_xia_yao_c_tos> {
  private static readonly pb::MessageParser<skill_dui_zheng_xia_yao_c_tos> _parser = new pb::MessageParser<skill_dui_zheng_xia_yao_c_tos>(() => new skill_dui_zheng_xia_yao_c_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_dui_zheng_xia_yao_c_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[105]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_c_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_c_tos(skill_dui_zheng_xia_yao_c_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    messageCardId_ = other.messageCardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_c_tos Clone() {
    return new skill_dui_zheng_xia_yao_c_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "message_card_id" field.</summary>
  public const int MessageCardIdFieldNumber = 2;
  private uint messageCardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MessageCardId {
    get { return messageCardId_; }
    set {
      messageCardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_dui_zheng_xia_yao_c_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_dui_zheng_xia_yao_c_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (MessageCardId != other.MessageCardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (MessageCardId != 0) hash ^= MessageCardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (MessageCardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(MessageCardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (MessageCardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageCardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_dui_zheng_xia_yao_c_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.MessageCardId != 0) {
      MessageCardId = other.MessageCardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          MessageCardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【对症下药】C
/// </summary>
public sealed partial class skill_dui_zheng_xia_yao_c_toc : pb::IMessage<skill_dui_zheng_xia_yao_c_toc> {
  private static readonly pb::MessageParser<skill_dui_zheng_xia_yao_c_toc> _parser = new pb::MessageParser<skill_dui_zheng_xia_yao_c_toc>(() => new skill_dui_zheng_xia_yao_c_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_dui_zheng_xia_yao_c_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[106]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_c_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_c_toc(skill_dui_zheng_xia_yao_c_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    messageCardId_ = other.messageCardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_dui_zheng_xia_yao_c_toc Clone() {
    return new skill_dui_zheng_xia_yao_c_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "message_card_id" field.</summary>
  public const int MessageCardIdFieldNumber = 3;
  private uint messageCardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MessageCardId {
    get { return messageCardId_; }
    set {
      messageCardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_dui_zheng_xia_yao_c_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_dui_zheng_xia_yao_c_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (MessageCardId != other.MessageCardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (MessageCardId != 0) hash ^= MessageCardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (MessageCardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(MessageCardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (MessageCardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageCardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_dui_zheng_xia_yao_c_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.MessageCardId != 0) {
      MessageCardId = other.MessageCardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          MessageCardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 白昆山【毒计】A：争夺阶段，你可以翻开此角色牌，然后指定两名其他角色，令他们相互抽取对方的一张手牌并展示之，你将展示的牌加入你的手牌。
/// </summary>
public sealed partial class skill_du_ji_a_tos : pb::IMessage<skill_du_ji_a_tos> {
  private static readonly pb::MessageParser<skill_du_ji_a_tos> _parser = new pb::MessageParser<skill_du_ji_a_tos>(() => new skill_du_ji_a_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_du_ji_a_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[107]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_a_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_a_tos(skill_du_ji_a_tos other) : this() {
    targetPlayerIds_ = other.targetPlayerIds_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_a_tos Clone() {
    return new skill_du_ji_a_tos(this);
  }

  /// <summary>Field number for the "target_player_ids" field.</summary>
  public const int TargetPlayerIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_targetPlayerIds_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> targetPlayerIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> TargetPlayerIds {
    get { return targetPlayerIds_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_du_ji_a_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_du_ji_a_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!targetPlayerIds_.Equals(other.targetPlayerIds_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= targetPlayerIds_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    targetPlayerIds_.WriteTo(output, _repeated_targetPlayerIds_codec);
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += targetPlayerIds_.CalculateSize(_repeated_targetPlayerIds_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_du_ji_a_tos other) {
    if (other == null) {
      return;
    }
    targetPlayerIds_.Add(other.targetPlayerIds_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          targetPlayerIds_.AddEntriesFrom(input, _repeated_targetPlayerIds_codec);
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【毒计】A
/// </summary>
public sealed partial class skill_du_ji_a_toc : pb::IMessage<skill_du_ji_a_toc> {
  private static readonly pb::MessageParser<skill_du_ji_a_toc> _parser = new pb::MessageParser<skill_du_ji_a_toc>(() => new skill_du_ji_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_du_ji_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[108]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_a_toc(skill_du_ji_a_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerIds_ = other.targetPlayerIds_.Clone();
    cards_ = other.cards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_a_toc Clone() {
    return new skill_du_ji_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_ids" field.</summary>
  public const int TargetPlayerIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_targetPlayerIds_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> targetPlayerIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> TargetPlayerIds {
    get { return targetPlayerIds_; }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_du_ji_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_du_ji_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if(!targetPlayerIds_.Equals(other.targetPlayerIds_)) return false;
    if(!cards_.Equals(other.cards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    hash ^= targetPlayerIds_.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    targetPlayerIds_.WriteTo(output, _repeated_targetPlayerIds_codec);
    cards_.WriteTo(output, _repeated_cards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    size += targetPlayerIds_.CalculateSize(_repeated_targetPlayerIds_codec);
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_du_ji_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    targetPlayerIds_.Add(other.targetPlayerIds_);
    cards_.Add(other.cards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18:
        case 16: {
          targetPlayerIds_.AddEntriesFrom(input, _repeated_targetPlayerIds_codec);
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【毒计】B
/// </summary>
public sealed partial class skill_wait_for_du_ji_b_toc : pb::IMessage<skill_wait_for_du_ji_b_toc> {
  private static readonly pb::MessageParser<skill_wait_for_du_ji_b_toc> _parser = new pb::MessageParser<skill_wait_for_du_ji_b_toc>(() => new skill_wait_for_du_ji_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_du_ji_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[109]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_du_ji_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_du_ji_b_toc(skill_wait_for_du_ji_b_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerIds_ = other.targetPlayerIds_.Clone();
    cardIds_ = other.cardIds_.Clone();
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_du_ji_b_toc Clone() {
    return new skill_wait_for_du_ji_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_ids" field.</summary>
  public const int TargetPlayerIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_targetPlayerIds_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> targetPlayerIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> TargetPlayerIds {
    get { return targetPlayerIds_; }
  }

  /// <summary>Field number for the "card_ids" field.</summary>
  public const int CardIdsFieldNumber = 3;
  private static readonly pb::FieldCodec<uint> _repeated_cardIds_codec
      = pb::FieldCodec.ForUInt32(26);
  private readonly pbc::RepeatedField<uint> cardIds_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// 能选的卡牌ID，只有白昆山能看见，上面的target_player_ids对应的是这张牌会给谁选择
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardIds {
    get { return cardIds_; }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 4;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_du_ji_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_du_ji_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if(!targetPlayerIds_.Equals(other.targetPlayerIds_)) return false;
    if(!cardIds_.Equals(other.cardIds_)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    hash ^= targetPlayerIds_.GetHashCode();
    hash ^= cardIds_.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    targetPlayerIds_.WriteTo(output, _repeated_targetPlayerIds_codec);
    cardIds_.WriteTo(output, _repeated_cardIds_codec);
    if (WaitingSecond != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    size += targetPlayerIds_.CalculateSize(_repeated_targetPlayerIds_codec);
    size += cardIds_.CalculateSize(_repeated_cardIds_codec);
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_du_ji_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    targetPlayerIds_.Add(other.targetPlayerIds_);
    cardIds_.Add(other.cardIds_);
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18:
        case 16: {
          targetPlayerIds_.AddEntriesFrom(input, _repeated_targetPlayerIds_codec);
          break;
        }
        case 26:
        case 24: {
          cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
          break;
        }
        case 32: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 白昆山【毒计】B：若展示的是黑色牌，你可以改为令抽取者选择一项。
/// </summary>
public sealed partial class skill_du_ji_b_tos : pb::IMessage<skill_du_ji_b_tos> {
  private static readonly pb::MessageParser<skill_du_ji_b_tos> _parser = new pb::MessageParser<skill_du_ji_b_tos>(() => new skill_du_ji_b_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_du_ji_b_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[110]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_b_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_b_tos(skill_du_ji_b_tos other) : this() {
    enable_ = other.enable_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_b_tos Clone() {
    return new skill_du_ji_b_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_du_ji_b_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_du_ji_b_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_du_ji_b_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【毒计】B
/// </summary>
public sealed partial class skill_du_ji_b_toc : pb::IMessage<skill_du_ji_b_toc> {
  private static readonly pb::MessageParser<skill_du_ji_b_toc> _parser = new pb::MessageParser<skill_du_ji_b_toc>(() => new skill_du_ji_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_du_ji_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[111]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_b_toc(skill_du_ji_b_toc other) : this() {
    playerId_ = other.playerId_;
    enable_ = other.enable_;
    waitingPlayerId_ = other.waitingPlayerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_b_toc Clone() {
    return new skill_du_ji_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 白昆山的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 2;
  private bool enable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "waiting_player_id" field.</summary>
  public const int WaitingPlayerIdFieldNumber = 3;
  private uint waitingPlayerId_;
  /// <summary>
  /// 读秒的玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingPlayerId {
    get { return waitingPlayerId_; }
    set {
      waitingPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 4;
  private uint targetPlayerId_;
  /// <summary>
  /// 对方的玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 5;
  private global::card card_;
  /// <summary>
  /// 做选择的卡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 6;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 7;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_du_ji_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_du_ji_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Enable != other.Enable) return false;
    if (WaitingPlayerId != other.WaitingPlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (WaitingPlayerId != 0) hash ^= WaitingPlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (Enable != false) {
      output.WriteRawTag(16);
      output.WriteBool(Enable);
    }
    if (WaitingPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(WaitingPlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Card);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Enable != false) {
      size += 1 + 1;
    }
    if (WaitingPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingPlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_du_ji_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.WaitingPlayerId != 0) {
      WaitingPlayerId = other.WaitingPlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Enable = input.ReadBool();
          break;
        }
        case 24: {
          WaitingPlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 42: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 48: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 56: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 白昆山【毒计】C：
/// ♦ 将其置入自己的情报区
/// ♦ 将其置入对方的情报区
/// </summary>
public sealed partial class skill_du_ji_c_tos : pb::IMessage<skill_du_ji_c_tos> {
  private static readonly pb::MessageParser<skill_du_ji_c_tos> _parser = new pb::MessageParser<skill_du_ji_c_tos>(() => new skill_du_ji_c_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_du_ji_c_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[112]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_c_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_c_tos(skill_du_ji_c_tos other) : this() {
    inFrontOfMe_ = other.inFrontOfMe_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_c_tos Clone() {
    return new skill_du_ji_c_tos(this);
  }

  /// <summary>Field number for the "in_front_of_me" field.</summary>
  public const int InFrontOfMeFieldNumber = 1;
  private bool inFrontOfMe_;
  /// <summary>
  /// true-放入自己的情报区，false-放入对方的情报区
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool InFrontOfMe {
    get { return inFrontOfMe_; }
    set {
      inFrontOfMe_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_du_ji_c_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_du_ji_c_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InFrontOfMe != other.InFrontOfMe) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (InFrontOfMe != false) hash ^= InFrontOfMe.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (InFrontOfMe != false) {
      output.WriteRawTag(8);
      output.WriteBool(InFrontOfMe);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (InFrontOfMe != false) {
      size += 1 + 1;
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_du_ji_c_tos other) {
    if (other == null) {
      return;
    }
    if (other.InFrontOfMe != false) {
      InFrontOfMe = other.InFrontOfMe;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InFrontOfMe = input.ReadBool();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【毒计】C
/// </summary>
public sealed partial class skill_du_ji_c_toc : pb::IMessage<skill_du_ji_c_toc> {
  private static readonly pb::MessageParser<skill_du_ji_c_toc> _parser = new pb::MessageParser<skill_du_ji_c_toc>(() => new skill_du_ji_c_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_du_ji_c_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[113]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_c_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_c_toc(skill_du_ji_c_toc other) : this() {
    playerId_ = other.playerId_;
    waitingPlayerId_ = other.waitingPlayerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_du_ji_c_toc Clone() {
    return new skill_du_ji_c_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 白昆山的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_player_id" field.</summary>
  public const int WaitingPlayerIdFieldNumber = 2;
  private uint waitingPlayerId_;
  /// <summary>
  /// 做选择的玩家的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingPlayerId {
    get { return waitingPlayerId_; }
    set {
      waitingPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  /// <summary>
  /// 放在谁的面前
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 4;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_du_ji_c_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_du_ji_c_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingPlayerId != other.WaitingPlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingPlayerId != 0) hash ^= WaitingPlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingPlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingPlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_du_ji_c_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingPlayerId != 0) {
      WaitingPlayerId = other.WaitingPlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 34: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
